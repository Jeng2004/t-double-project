export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import nodemailer from 'nodemailer';

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
    const { username, name, email, password, status, dept, role } = await req.json();

    // ‚úÖ Validate field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!name || !email || !password) {
        return NextResponse.json(
            { error: 'Name, email, and password are required' },
            { status: 400 }
        );
    }

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default
    const generatedUsername = username || `${name.replace(/\s+/g, '').toLowerCase()}-${Date.now()}`;
    const userStatus = status || 'active';
    const validRoles = ['admin', 'user'];
    const userRole = validRoles.includes(role) ? role : 'user';

    // üö´ ‡∏ñ‡πâ‡∏≤ role=user ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ admin ‡πÉ‡∏ô name/email
    if (
        userRole === 'user' &&
        (/admin/i.test(name) || /admin/i.test(email))
    ) {
        return NextResponse.json(
            { error: '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "admin" ‡πÑ‡∏î‡πâ' },
            { status: 400 }
        );
    }

    try {
        // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email ‡∏ã‡πâ‡∏≥
        const existingUser = await prisma.user.findUnique({ where: { email } });
        if (existingUser) {
            return NextResponse.json(
                { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß' },
                { status: 409 }
            );
        }

        // ‚úÖ Hash password
        const hashedPassword = await bcrypt.hash(password, 10);

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
        const newUser = await prisma.user.create({
            data: {
                username: generatedUsername,
                name,
                email,
                password: hashedPassword,
                status: userStatus,
                dept,
                role: userRole
            }
        });

        return NextResponse.json(
            {
                message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                user: {
                    id: newUser.id,
                    username: newUser.username,
                    name: newUser.name,
                    email: newUser.email,
                    status: newUser.status,
                    dept: newUser.dept,
                    role: newUser.role,
                    createdAt: newUser.createdAt
                }
            },
            { status: 201 }
        );
    } catch (error) {
        console.error('‚ùå POST user error:', error);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

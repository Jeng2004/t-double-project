export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import nodemailer from 'nodemailer';

const prisma = new PrismaClient();

// ‚úâÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Nodemailer transporter
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER, // ‡∏à‡∏≤‡∏Å .env
        pass: process.env.EMAIL_PASS, // ‡πÉ‡∏ä‡πâ App Password
    },
});

// üöÄ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏™‡πà‡∏á OTP ‡∏û‡∏£‡πâ‡∏≠‡∏° Countdown)
export async function POST(req: NextRequest) {
    const { username, name, email, password, status, dept, role } = await req.json();

    if (!username || !email || !password) {
        return NextResponse.json(
            { error: 'Username, email, and password are required' },
            { status: 400 }
        );
    }

    const userStatus = status || 'active';
    const validRoles = ['admin', 'user'];
    const userRole = validRoles.includes(role) ? role : 'user';

    if (
        userRole === 'user' &&
        (/admin/i.test(username) || /admin/i.test(email))
    ) {
        return NextResponse.json(
            { error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "admin" ‡πÑ‡∏î‡πâ' },
            { status: 400 }
        );
    }

    try {
        // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡∏ã‡πâ‡∏≥
        const existingUsername = await prisma.user.findUnique({ where: { username } });
        if (existingUsername) {
            return NextResponse.json(
                { error: 'Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß' },
                { status: 409 }
            );
        }

        // üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email ‡∏ã‡πâ‡∏≥
        const existingEmail = await prisma.user.findUnique({ where: { email } });
        if (existingEmail) {
            return NextResponse.json(
                { error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß' },
                { status: 409 }
            );
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const otp = Math.floor(100000 + Math.random() * 900000).toString();
        const otpExpiry = new Date(Date.now() + 1 * 60 * 1000); // üïê 1 ‡∏ô‡∏≤‡∏ó‡∏µ

        const newUser = await prisma.user.create({
            data: {
                username, // ‚úÖ username ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login
                name: name || username, // ‚úÖ name ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á name ‡πÉ‡∏ä‡πâ username ‡πÅ‡∏ó‡∏ô
                email,
                password: hashedPassword,
                status: userStatus,
                dept,
                role: userRole,
                active: false,
                otp,
                otpExpiry,
            },
        });

        // üïí HTML Email ‡∏û‡∏£‡πâ‡∏≠‡∏° Countdown Timer
        const emailHTML = `
            <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${newUser.name} üëã</h2>
            <p>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:</p>
            <div style="font-size: 24px; font-weight: bold; color: hsla(114, 83%, 49%, 1.00);">${otp}</div>
            <p style="margin-top: 10px;">‚è≥ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô <span id="timer" style="font-weight:bold;">01:00</span></p>
            <script>
                let timeLeft = 60;
                const timer = document.getElementById('timer');
                const interval = setInterval(() => {
                    let minutes = Math.floor(timeLeft / 60);
                    let seconds = timeLeft % 60;
                    timer.textContent =
                        (minutes < 10 ? '0' : '') + minutes + ':' +
                        (seconds < 10 ? '0' : '') + seconds;
                    timeLeft--;
                    if (timeLeft < 0) {
                        clearInterval(interval);
                        timer.textContent = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
                    }
                }, 1000);
            </script>
            <p>‡∏´‡∏≤‡∏Å‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠ OTP ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå</p>
        `;

        await transporter.sendMail({
            from: `"T-Double" <${process.env.EMAIL_USER}>`,
            to: newUser.email,
            subject: 'OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            html: emailHTML,
        });

        return NextResponse.json(
            {
                message: '‚úÖ ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å OTP ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                user: {
                    id: newUser.id,
                    username: newUser.username,
                    name: newUser.name,
                    email: newUser.email,
                    status: newUser.status,
                    dept: newUser.dept,
                    role: newUser.role,
                    createdAt: newUser.createdAt,
                    otpExpiry: newUser.otpExpiry, // ‚è± ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏õ Frontend
                },
            },
            { status: 201 }
        );
    } catch (error) {
        console.error('‚ùå POST user error:', error);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

// üî• ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP (‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ)
export async function PATCH(req: NextRequest) {
    const { email, otp } = await req.json();

    if (!email || !otp) {
        return NextResponse.json(
            { error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞ OTP' },
            { status: 400 }
        );
    }

    try {
        const user = await prisma.user.findUnique({ where: { email } });

        if (
            !user ||
            user.otp !== otp ||
            !user.otpExpiry ||
            user.otpExpiry < new Date()
        ) {
            return NextResponse.json(
                { error: 'OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' },
                { status: 400 }
            );
        }

        await prisma.user.update({
            where: { email },
            data: {
                active: true,
                otp: null,
                otpExpiry: null,
            },
        });

        return NextResponse.json(
            { message: 'üéâ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß' },
            { status: 200 }
        );
    } catch (error) {
        console.error('‚ùå PATCH verify OTP error:', error);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

// üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ô‡∏î‡πå OTP (‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà)
export async function PUT(req: NextRequest) {
    const { email } = await req.json();

    if (!email) {
        return NextResponse.json(
            { error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà' },
            { status: 400 }
        );
    }

    try {
        const user = await prisma.user.findUnique({ where: { email } });

        if (!user) {
            return NextResponse.json(
                { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' },
                { status: 404 }
            );
        }

        const newOtp = Math.floor(100000 + Math.random() * 900000).toString();
        const newOtpExpiry = new Date(Date.now() + 1 * 60 * 1000);

        const resendHTML = `
            <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${user.name} üëã</h2>
            <p>‡∏£‡∏´‡∏±‡∏™ OTP ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:</p>
            <div style="font-size: 24px; font-weight: bold; color: #21f600ff;">${newOtp}</div>
            <p style="margin-top: 10px;">‚è≥ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô <span id="timer" style="font-weight:bold;">01:00</span></p>
            <script>
                let timeLeft = 60;
                const timer = document.getElementById('timer');
                const interval = setInterval(() => {
                    let minutes = Math.floor(timeLeft / 60);
                    let seconds = timeLeft % 60;
                    timer.textContent =
                        (minutes < 10 ? '0' : '') + minutes + ':' +
                        (seconds < 10 ? '0' : '') + seconds;
                    timeLeft--;
                    if (timeLeft < 0) {
                        clearInterval(interval);
                        timer.textContent = '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß';
                    }
                }, 1000);
            </script>
        `;

        await prisma.user.update({
            where: { email },
            data: {
                otp: newOtp,
                otpExpiry: newOtpExpiry,
            },
        });

        await transporter.sendMail({
            from: `"T-Double" <${process.env.EMAIL_USER}>`,
            to: user.email,
            subject: 'OTP ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            html: resendHTML,
        });

        return NextResponse.json(
            {
                message: '‚úÖ ‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß',
                otpExpiry: newOtpExpiry, // ‚è± ‡∏™‡πà‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏õ Frontend
            },
            { status: 200 }
        );
    } catch (error) {
        console.error('‚ùå PUT resend OTP error:', error);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á OTP ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

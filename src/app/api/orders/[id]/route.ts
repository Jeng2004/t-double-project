import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";

const prisma = new PrismaClient();

// üìù LOG HELPERS (‡πÄ‡∏û‡∏¥‡πà‡∏°)
const LOG_PREFIX = "üì¶ OrderStatusAPI";
const log = (...args: any[]) => console.log(LOG_PREFIX, ...args);
const info = (...args: any[]) => console.info(LOG_PREFIX, ...args);
const warn = (...args: any[]) => console.warn(LOG_PREFIX, ...args);

const allowedStatus = [
  "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
  "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß",
] as const;
type OrderStatus = (typeof allowedStatus)[number];

// ‡∏•‡∏≥‡∏î‡∏±‡∏ö flow ‡∏ó‡∏µ‡πà ‚Äú‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‚Äù (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
const flow: Exclude<OrderStatus, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">[] = [
  "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß",
];

// helper ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
function canTransition(current: OrderStatus, next: OrderStatus) {
  // ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° => ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (idempotent)
  if (current === next) return { ok: true as const };

  // ‡∏à‡∏ö‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß/‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏µ‡∏Å
  if (current === "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß" || current === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å") {
    return {
      ok: false as const,
      reason:
        `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å "${current}" ‡πÑ‡∏î‡πâ`,
    };
  }

  // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö
  // (‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‚Äî ‡∏Ñ‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠ "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏â‡∏±‡∏ô")
  if (next === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å") return { ok: true as const };

  // ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏¢‡∏±‡∏ö ‚Äú‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  const curIdx = flow.indexOf(current as (typeof flow)[number]);
  const nextIdx = flow.indexOf(next as (typeof flow)[number]);

  // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô flow (‡πÄ‡∏ä‡πà‡∏ô‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å) ‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  if (curIdx === -1 || nextIdx === -1) {
    return {
      ok: false as const,
      reason: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
    };
  }

  if (nextIdx === curIdx + 1) {
    // ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    return { ok: true as const };
  }

  // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô/‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á => ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
  return {
    ok: false as const,
    reason:
      `‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: "${flow.join('" ‚Üí "')}" (‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö)`,
  };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á transporter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS, // ‡πÉ‡∏ä‡πâ App Password
  },
});

export async function PATCH(
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  // üîπ LOG: ‡πÄ‡∏Ç‡πâ‡∏≤ handler
  info("PATCH called");

  try {
    const { id } = await context.params;
    const orderId = id;

    const { status } = (await req.json()) as { status?: OrderStatus };

    // üîπ LOG: ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤
    log("Incoming params", { orderId, status });

    if (!status || !allowedStatus.includes(status)) {
      warn("Invalid status payload", { status, allowedStatus });
      return NextResponse.json(
        {
          error:
            `status ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô: ${allowedStatus.join(", ")}`,
        },
        { status: 400 }
      );
    }

    // ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° user
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: { user: true },
    });

    // üîπ LOG: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ order
    log("Fetched order", { found: !!order, orderId });

    if (!order) {
      warn("Order not found", { orderId });
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" },
        { status: 404 }
      );
    }

    const currentStatus = order.status as OrderStatus;
    log("Current status", { orderId, currentStatus, next: status });

    // üîπ ADD: disallow cancel ‚Äî ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÄ‡∏™‡∏°‡∏≠
    if (status === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å") {
      warn("Cancel action blocked", { orderId, from: currentStatus, to: status });
      return NextResponse.json(
        { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ" },
        { status: 400 }
      );
    }

    // üîπ ADD: ‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥ (‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á)
    if (currentStatus === status) {
      warn("Duplicate status attempt", { orderId, status });
      return NextResponse.json(
        {
          error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ("${status}")`,
          order,
        },
        { status: 400 }
      );
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Ñ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
    const check = canTransition(currentStatus, status);
    log("Transition check", { from: currentStatus, to: status, ok: check.ok });

    if (!check.ok) {
      warn("Transition blocked", { reason: check.reason });
      return NextResponse.json(
        {
          error:
            check.reason ??
            "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ",
        },
        { status: 400 }
      );
    }

    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á update/‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥
    // (‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠ "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏â‡∏±‡∏ô" ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏±‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    if (currentStatus === status) {
      info("No-op update (same status) ‚Äî legacy branch kept");
      return NextResponse.json(
        {
          message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)",
          order,
        },
        { status: 200 }
      );
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    info("Updating order status", { orderId, to: status });
    const updatedOrder = await prisma.order.update({
      where: { id: orderId },
      data: { status },
      include: { user: true },
    });
    log("Updated order", { orderId: updatedOrder.id, newStatus: updatedOrder.status });

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (updatedOrder.user?.email) {
      info("Sending email notification", {
        to: updatedOrder.user.email,
        orderId: updatedOrder.id,
        status,
      });
      await transporter.sendMail({
        from: process.env.EMAIL_USER,
        to: updatedOrder.user.email,
        subject: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${updatedOrder.id}`,
        text: `‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${status}`,
        html: `<p>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <b>${status}</b></p>`,
      });
      log("Email sent successfully");
    } else {
      warn("No user email to notify", { orderId: updatedOrder.id });
    }

    info("PATCH success", { orderId, status });

    return NextResponse.json(
      {
        message:
          "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡πâ‡∏ß",
        order: updatedOrder,
      },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå Error updating order:", err);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" }, { status: 500 });
  }
}

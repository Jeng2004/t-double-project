// /api/orders/return/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
import Stripe from "stripe";

const prisma = new PrismaClient();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);

// üïí ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
function formatToThaiTime(date: Date) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

// üìß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function sendEmail(to: string, subject: string, html: string) {
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EMAIL_USER/EMAIL_PASS ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
    return;
  }
  console.log(`üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á: ${to}, subject: ${subject}`);
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
  });
  await transporter.sendMail({
    from: `"‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    html,
  });
  console.log("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
}

/* -----------------------------------
   üì¶ GET: ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° id
----------------------------------- */
export async function GET(
  _req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    console.log(`üîé GET ReturnRequest id=${id}`);

    const request = await prisma.returnRequest.findUnique({
      where: { id },
      include: {
        items: {
          include: { orderItem: { include: { product: true } } },
        },
        order: { include: { user: true } },
      },
    });

    if (!request) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ReturnRequest id=${id}`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }

    console.log(`‚úÖ ‡∏û‡∏ö ReturnRequest id=${id}, status=${request.status}`);
    return NextResponse.json(request, { status: 200 });
  } catch (err) {
    console.error("‚ùå GET ReturnRequest error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/* -----------------------------------
   ‚úèÔ∏è PATCH: ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô
----------------------------------- */
export async function PATCH(
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    const { status, adminNote, refundAmount } = await req.json();
    console.log(`‚úèÔ∏è PATCH id=${id}, status=${status}, refundAmount=${refundAmount}, adminNote=${adminNote}`);

    if (!["approved", "rejected"].includes(status)) {
      console.warn(`‚ö†Ô∏è Status ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${status}`);
      return NextResponse.json({ error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á ReturnRequest + Order + User
    const request = await prisma.returnRequest.findUnique({
      where: { id },
      include: {
        items: {
          include: { orderItem: { include: { product: true } } },
        },
        order: { include: { user: true } },
      },
    });

    if (!request) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ReturnRequest id=${id}`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }
    console.log(`üì¶ ‡∏û‡∏ö ReturnRequest id=${id}, orderId=${request.orderId}, user=${request.order.user.email}`);

    // üö® ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥
    if (request.status !== "pending") {
      console.warn(`‚õî ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ReturnRequest id=${id} ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ '${request.status}'`);
      return NextResponse.json(
        { error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ '${request.status}'` },
        { status: 400 }
      );
    }

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ReturnRequest
    const updated = await prisma.returnRequest.update({
      where: { id },
      data: {
        status,
        adminNote: adminNote ?? null,
        updatedAt: new Date(),
      },
      include: {
        order: { include: { user: true } },
        items: { include: { orderItem: { include: { product: true } } } },
      },
    });
    console.log(`‚úÖ ReturnRequest ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß: id=${id}, status=${status}`);

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Order ‡πÄ‡∏õ‡πá‡∏ô "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
    if (status === "approved") {
      await prisma.order.update({
        where: { id: updated.orderId },
        data: {
          status: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
          updatedAt: new Date(),
        },
      });
      console.log(`üîÑ Order ${updated.orderId} ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'`);
    }

    // ‚úÖ ‡∏Ñ‡∏∑‡∏ô Stock ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    if (status === "approved") {
      for (const item of updated.items) {
        const product = item.orderItem?.product;
        if (product) {
          const stock: Record<string, number> = product.stock as any;
          const before = stock[item.orderItem.size];
          stock[item.orderItem.size] += item.quantity;
          const after = stock[item.orderItem.size];
          await prisma.product.update({
            where: { id: product.id },
            data: { stock },
          });
          console.log(`üì¶ ‡∏Ñ‡∏∑‡∏ô Stock -> ${product.name} [${item.orderItem.size}] ${before} ‚ûù ${after}`);
        }
      }
    }

    // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô Stripe ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    try {
      if (status === "approved" && updated.order.isPaid && updated.order.paymentIntentId) {
        const refundData: Stripe.RefundCreateParams = {
          payment_intent: updated.order.paymentIntentId,
        };
        if (refundAmount && refundAmount > 0) {
          refundData.amount = Math.round(refundAmount * 100);
          console.log(`üí∏ Partial Refund ${refundAmount} ‡∏ö‡∏≤‡∏ó`);
        } else {
          console.log(`üí∏ Full Refund ${updated.order.totalAmount} ‡∏ö‡∏≤‡∏ó`);
        }
        const refund = await stripe.refunds.create(refundData);
        console.log(`‚úÖ Stripe Refund ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: refundId=${refund.id}, amount=${refund.amount / 100}`);
      }
    } catch (refundErr) {
      console.error("‚ùå Stripe Refund error:", refundErr);
    }

    // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    try {
      console.log(`üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏∂‡∏á ${updated.order.user.email}`);
      await sendEmail(
        updated.order.user.email,
        `T-Double ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ #${updated.order.trackingId}`,
        `
          <h2>üì¢ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
          <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <b>${status === "approved" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"}</b></p>
          <p>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${updated.order.id}</p>
          <p>Tracking: ${updated.order.trackingId}</p>
          ${adminNote ? `<p>üìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô: ${adminNote}</p>` : ""}
          <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${formatToThaiTime(new Date())}</p>
        `
      );
    } catch (mailErr) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", mailErr);
    }

    console.log(`‚úÖ PATCH ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô id=${id}, status=${status}`);
    return NextResponse.json(
      { message: `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô ${status} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Order ‡πÄ‡∏õ‡πá‡∏ô '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'`, request: updated },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå PATCH error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/* -----------------------------------
   üóëÔ∏è DELETE: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/‡∏•‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô (soft delete)
----------------------------------- */
export async function DELETE(
  _req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    console.log(`üóëÔ∏è DELETE ReturnRequest id=${id}`);

    const request = await prisma.returnRequest.findUnique({ where: { id } });
    if (!request) {
      console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ReturnRequest id=${id}`);
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }

    // ‚ùå ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô cancelled
    const updated = await prisma.returnRequest.update({
      where: { id },
      data: {
        status: "cancelled",
        updatedAt: new Date(),
      },
    });
    console.log(`‚úÖ ReturnRequest id=${id} ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô cancelled`);

    return NextResponse.json(
      { message: "‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (soft delete)", request: updated },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå DELETE error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// /api/orders/return/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
import Stripe from "stripe";

const prisma = new PrismaClient();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);

// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
function formatToThaiTime(date: Date) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

// ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function sendEmail(to: string, subject: string, html: string) {
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EMAIL_USER/EMAIL_PASS ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
    return;
  }
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
  });
  await transporter.sendMail({
    from: `"‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    html,
  });
  console.log(`üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${to} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
}

/* GET ReturnRequest */
export async function GET(_req: NextRequest, context: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await context.params;
    const request = await prisma.returnRequest.findUnique({
      where: { id },
      include: { 
        items: { include: { orderItem: { include: { product: true } } } },
        order: { include: { user: true } },
      },
    });
    if (!request) return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    return NextResponse.json(request, { status: 200 });
  } catch (err) {
    console.error("‚ùå GET ReturnRequest error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/* PATCH ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò */
export async function PATCH(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await context.params;
    const { status, adminNote, refundAmount } = await req.json();

    if (!["approved", "rejected"].includes(status)) {
      return NextResponse.json({ error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
    }

    // ‡∏î‡∏∂‡∏á ReturnRequest + Order + User
    const request = await prisma.returnRequest.findUnique({
      where: { id },
      include: {
        items: { include: { orderItem: { include: { product: true } } } },
        order: { include: { user: true } },
      },
    });
    if (!request) return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });

    console.log(`üì¶ ReturnRequest ‡∏û‡∏ö: id=${id}, orderId=${request.orderId}, status=${request.status}, user=${request.order.user.email}`);

    // ‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥
    if (request.status !== "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£") {
      return NextResponse.json(
        { error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ '${request.status}'` },
        { status: 400 }
      );
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ReturnRequest
    const updated = await prisma.returnRequest.update({
      where: { id },
      data: { status, adminNote: adminNote ?? null, updatedAt: new Date() },
      include: {
        order: { include: { user: true } },
        items: { include: { orderItem: { include: { product: true } } } },
      },
    });

    // ‡∏ñ‡πâ‡∏≤ approved ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Order, ‡∏Ñ‡∏∑‡∏ô Stock, ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    if (status === "approved") {
      await prisma.order.update({
        where: { id: updated.orderId },
        data: { status: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", updatedAt: new Date() },
      });

      // ‡∏Ñ‡∏∑‡∏ô Stock
      for (const item of updated.items) {
        const product = item.orderItem?.product;
        if (product) {
          const stock: Record<string, number> = product.stock as any;
          stock[item.orderItem.size] += item.quantity;
          await prisma.product.update({ where: { id: product.id }, data: { stock } });
          console.log(`üì¶ ‡∏Ñ‡∏∑‡∏ô Stock -> ${product.name} [${item.orderItem.size}]`);
        }
      }

      // ‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô Stripe
      try {
        if (updated.order.isPaid && updated.order.paymentIntentId) {
          const refundData: Stripe.RefundCreateParams = { payment_intent: updated.order.paymentIntentId };
          if (refundAmount && refundAmount > 0) refundData.amount = Math.round(refundAmount * 100);

          const refund = await stripe.refunds.create(refundData);
          console.log(`üí∏ Stripe Refund ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß: refundId=${refund.id}, amount=${refund.amount / 100} ‡∏ö‡∏≤‡∏ó`);

          // log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          const refundStatus = await stripe.refunds.retrieve(refund.id);
          console.log(`üí∞ Refund status: ${refundStatus.status}`);
        }
      } catch (err) {
        console.error("‚ùå Stripe Refund error:", err);
      }
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    try {
      await sendEmail(
        updated.order.user.email,
        `T-Double ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ #${updated.order.trackingId}`,
        `
        <h2>üì¢ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
        <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <b>${status === "approved" ? "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" : "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"}</b></p>
        <p>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${updated.order.id}</p>
        <p>Tracking: ${updated.order.trackingId}</p>
        ${adminNote ? `<p>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô: ${adminNote}</p>` : ""}
        ${status === "approved" ? `<p>üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2‚Äì3 ‡∏ß‡∏±‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£</p>` : ""}
        <p>‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${formatToThaiTime(new Date())}</p>
        `
      );
    } catch (err) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    }

    return NextResponse.json({ message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô ${status} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, request: updated }, { status: 200 });
  } catch (err) {
    console.error("‚ùå PATCH error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/* DELETE: soft delete */
export async function DELETE(_req: NextRequest, context: { params: Promise<{ id: string }> }) {
  try {
    const { id } = await context.params;
    const request = await prisma.returnRequest.findUnique({ where: { id } });
    if (!request) return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });

    const updated = await prisma.returnRequest.update({
      where: { id },
      data: { status: "cancelled", updatedAt: new Date() },
    });

    return NextResponse.json({ message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", request: updated }, { status: 200 });
  } catch (err) {
    console.error("‚ùå DELETE error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

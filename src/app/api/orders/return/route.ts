import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
import fs from "fs/promises";
import path from "path";

const prisma = new PrismaClient();

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• */
async function sendEmail(to: string, subject: string, html: string) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: `"‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    html,
  });
}

export async function POST(req: NextRequest) {
  try {
    const formData = await req.formData();

    const orderId = formData.get("orderId") as string | null;
    const reason = formData.get("reason") as string | null;
    const files = formData.getAll("images") as File[];

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö itemsRaw ‡∏Å‡πà‡∏≠‡∏ô parse
    const itemsRaw = formData.get("items") as string | null;
    if (!itemsRaw) {
      return NextResponse.json(
        { error: "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á items ‡πÄ‡∏õ‡πá‡∏ô JSON string" },
        { status: 400 }
      );
    }

    let items: { orderItemId: string; quantity: number }[];
    try {
      items = JSON.parse(itemsRaw);
    } catch (e) {
      return NextResponse.json(
        { error: "items ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", raw: itemsRaw },
        { status: 400 }
      );
    }

    if (!orderId || !Array.isArray(items)) {
      return NextResponse.json(
        { error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ orderId ‡πÅ‡∏•‡∏∞ items" },
        { status: 400 }
      );
    }

    if (!files || files.length < 1 || files.length > 5) {
      return NextResponse.json(
        { error: "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏π‡∏õ" },
        { status: 400 }
      );
    }

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ order + user + orderItems
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: { user: true, orderItems: true },
    });

    if (!order) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    for (const item of items) {
      const orderItem = order.orderItems.find((oi) => oi.id === item.orderItemId);
      if (!orderItem) {
        return NextResponse.json(
          { error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${item.orderItemId}` },
          { status: 400 }
        );
      }
      if (item.quantity > orderItem.quantity) {
        return NextResponse.json(
          {
            error: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏∑‡∏ô (${item.quantity}) ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠ (${orderItem.quantity})`,
          },
          { status: 400 }
        );
      }

      // ‚úÖ ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏ã‡πâ‡∏≥
      const existingReturn = await prisma.returnItem.findUnique({
        where: { orderItemId: item.orderItemId },
      });
      if (existingReturn) {
        return NextResponse.json(
          { error: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ (orderItemId: ${item.orderItemId}) ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß` },
          { status: 400 }
        );
      }
    }

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡∏•‡∏á public/uploads
    const uploadDir = path.join(process.cwd(), "public", "uploads");
    await fs.mkdir(uploadDir, { recursive: true });

    const savedPaths: string[] = [];
    for (const file of files) {
      const bytes = Buffer.from(await file.arrayBuffer());
      const fileName = `${Date.now()}-${file.name}`;
      const filePath = path.join(uploadDir, fileName);
      await fs.writeFile(filePath, bytes);
      savedPaths.push(`/uploads/${fileName}`);
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ReturnRequest + ReturnItem
    const request = await prisma.returnRequest.create({
      data: {
        orderId,
        reason: reason ?? "",
        images: savedPaths,
        status: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        items: {
          create: items.map((item) => ({
            orderItemId: item.orderItemId,
            quantity: item.quantity,
          })),
        },
      },
      include: { items: true },
    });

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    try {
      await sendEmail(
        order.user.email,
        `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ #${order.trackingId}`,
        `
          <h2>üì¶ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</h2>
          <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì <b>${order.user.name ?? ""}</b></p>
          <p>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ${order.id}</p>
          <p>Tracking ID: ${order.trackingId}</p>
          <p><b>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</b> ${reason ?? "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
          <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${request.status}</p>
          <p>‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${savedPaths.length} ‡∏£‡∏π‡∏õ</p>
          <hr />
          <p>‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡πà‡∏∞ üôè</p>
        `
      );
    } catch (mailErr) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", mailErr);
    }

    return NextResponse.json(
      { message: "‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", request },
      { status: 201 }
    );
  } catch (err) {
    console.error("‚ùå Error creating return request:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á item ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö orderItems
type OrderItem = {
  productId: string;
  quantity: number;
  price: number;      // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° (Int32)
  size: string;
  unitPrice: number;  // unitPrice ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  totalPrice: number; // totalPrice ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
};

export async function POST(req: NextRequest) {
  try {
    console.log('üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á POST /api/order');

    const { userId, items, address, phone, name, email } = await req.json();
    console.log('üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤:', { userId, items, address, phone, name, email });

    if (!userId) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ userId');
      return NextResponse.json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId' }, { status: 400 });
    }

    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...');
    const user = await prisma.user.findUnique({ where: { id: userId } });
    if (!user) {
      console.warn('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', userId);
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }, { status: 404 });
    }
    console.log('‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:', user.email);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const missingFields: string[] = [];
    if (!user.name && !name) missingFields.push('name');
    if (!user.phone && !phone) missingFields.push('phone');
    if (!user.address && !address) missingFields.push('address');
    if (!user.email && !email) missingFields.push('email');

    if (missingFields.length > 0) {
      console.warn('‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:', missingFields);
      return NextResponse.json({
        error: `‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${missingFields.join(', ')} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠`,
      }, { status: 400 });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if (!user.name || !user.phone || !user.address || !user.email) {
      console.log('üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå...');
      await prisma.user.update({
        where: { id: userId },
        data: {
          name: user.name || name,
          phone: user.phone || phone,
          address: user.address || address,
          email: user.email || email,
        },
      });
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }

    let orderItems: OrderItem[] = items;
    let totalAmount = 0;

    if (!orderItems || !Array.isArray(orderItems) || orderItems.length === 0) {
      console.log('üõí ‡πÑ‡∏°‡πà‡∏°‡∏µ items ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏ä‡πâ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏ó‡∏ô');
      const cart = await prisma.cartItem.findMany({
        where: { userId },
        include: { product: true },
      });

      if (cart.length === 0) {
        console.warn('üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á');
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤' }, { status: 400 });
      }

      orderItems = cart.map((item) => {
        const priceObj = item.product.price as Record<string, number>;
        const price = priceObj[item.size];
        const unitPrice = item.unitPrice;
        const totalPrice = item.totalPrice;

        if (price === undefined || isNaN(price) || price <= 0) {
          console.warn(`‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ${item.productId} ‡∏Ç‡∏ô‡∏≤‡∏î ${item.size}`);
          return {
            productId: item.productId,
            quantity: item.quantity,
            price: 0,
            size: item.size,
            unitPrice: 0,
            totalPrice: 0,
          };
        }

        totalAmount += totalPrice;
        return {
          productId: item.productId,
          quantity: item.quantity,
          price: Math.floor(price),
          size: item.size,
          unitPrice,
          totalPrice,
        };
      });
      console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ${orderItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    } else {
      orderItems.forEach((item) => {
        totalAmount += item.totalPrice;
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
    console.log('üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:', totalAmount);
    if (isNaN(totalAmount) || totalAmount <= 0) {
      console.warn('‚ùå ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', totalAmount);
      return NextResponse.json({ error: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á order
    for (const item of orderItems) {
      const product = await prisma.product.findUnique({ where: { id: item.productId } });
      if (!product) {
        return NextResponse.json({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.productId}` }, { status: 404 });
      }

      const stockBySize = product.stock as Record<string, number>;
      const availableStock = stockBySize?.[item.size] ?? 0;

      if (availableStock <= 0) {
        return NextResponse.json(
          { error: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î: ${product.name} (${item.size})` },
          { status: 410 }
        );
      }

      if (item.quantity > availableStock) {
        return NextResponse.json(
          { error: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name} (${item.size}) ‡∏°‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${availableStock})` },
          { status: 409 }
        );
      }
    }

    // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    const result = await prisma.$transaction(async (tx) => {
      const createdOrder = await tx.order.create({
        data: {
          totalAmount,
          status: 'pending',
          orderItems: {
            create: orderItems.map((item) => ({
              productId: item.productId,
              quantity: item.quantity,
              price: item.price,
              size: item.size,
              unitPrice: item.unitPrice,
              totalPrice: item.totalPrice,
            })),
          },
          user: { connect: { id: userId } },
        },
        include: { orderItems: true },
      });

      // ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πä‡∏≠‡∏Å
      for (const item of orderItems) {
        const product = await tx.product.findUnique({ where: { id: item.productId } });
        if (!product) continue;

        const stock: Record<string, number> = product.stock as any;
        stock[item.size] -= item.quantity;

        await tx.product.update({
          where: { id: product.id },
          data: { stock },
        });

        console.log(`‚úÖ ‡∏´‡∏±‡∏Å‡∏™‡∏ï‡πä‡∏≠‡∏Å ${product.name} (${item.size}) ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${stock[item.size]}`);
      }

      await tx.cartItem.deleteMany({ where: { userId } });
      console.log('üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      return createdOrder;
    });

    console.log('‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:', result.id);

    return NextResponse.json(
      { message: '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', order: result },
      { status: 201 }
    );
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:', err);
    return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ' }, { status: 500 });
  }
}

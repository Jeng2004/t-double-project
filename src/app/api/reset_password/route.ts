export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import nodemailer from 'nodemailer';
import crypto from 'crypto';
import jwt from 'jsonwebtoken'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° JWT

const prisma = new PrismaClient();

// ‚úâÔ∏è Nodemailer transporter
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

// üöÄ POST: ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
export async function POST(req: NextRequest) {
    const { email } = await req.json();

    if (!email) {
        return NextResponse.json(
            { error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•' },
            { status: 400 }
        );
    }

    try {
        const user = await prisma.user.findUnique({ where: { email } });

        if (!user) {
            return NextResponse.json(
                { error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' },
                { status: 404 }
            );
        }

        // üóù ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏î‡πâ‡∏ß‡∏¢ crypto
        const rawToken = crypto.randomBytes(32).toString('hex');
        const tokenExpiry = new Date(Date.now() + 5 * 60 * 1000); // ‚è≥ 5 ‡∏ô‡∏≤‡∏ó‡∏µ

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå
        const jwtToken = jwt.sign(
            { userId: user.id, email: user.email },
            process.env.JWT_SECRET as string, // üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏° JWT_SECRET ‡πÉ‡∏ô .env
            { expiresIn: '5m' }
        );

        // üî• ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token (raw) ‡πÉ‡∏ô DB
        await prisma.user.update({
            where: { email },
            data: {
                otp: rawToken,
                otpExpiry: tokenExpiry,
            },
        });

        // üåê ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const resetLink = `${process.env.APP_URL}/reset-password?token=${jwtToken}`;

        // ‚úâÔ∏è ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        const emailHTML = `
            <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user.name} üëã</h2>
            <p>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</p>
            <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</p>
            <a href="${resetLink}" style="
                display:inline-block;
                background-color:#ec4899;
                color:white;
                padding:10px 20px;
                border-radius:5px;
                text-decoration:none;
            ">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</a>
            <p>‚è≥ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ</p>
            <p>‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏°‡∏¥‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</p>
        `;

        await transporter.sendMail({
            from: `"T-Double" <${process.env.EMAIL_USER}>`,
            to: user.email,
            subject: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            html: emailHTML,
        });

        return NextResponse.json(
            { message: '‚úÖ ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' },
            { status: 200 }
        );
    } catch (error) {
        console.error('‚ùå POST forgot-password error:', error);
        return NextResponse.json(
            { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ' },
            { status: 500 }
        );
    }
}

// üî• PATCH: ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå
export async function PATCH(req: NextRequest) {
    const { token, newPassword } = await req.json();

    if (!token || !newPassword) {
        return NextResponse.json(
            { error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ Token ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà' },
            { status: 400 }
        );
    }

    try {
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT token
        let decoded;
        try {
            decoded = jwt.verify(token, process.env.JWT_SECRET as string) as {
                userId: string;
                email: string;
            };
        } catch (err) {
            return NextResponse.json(
                { error: 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' },
                { status: 400 }
            );
        }

        const user = await prisma.user.findUnique({
            where: { id: decoded.userId },
        });

        if (!user || !user.otpExpiry || user.otpExpiry < new Date()) {
            return NextResponse.json(
                { error: '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà' },
                { status: 400 }
            );
        }

        const hashedPassword = await bcrypt.hash(newPassword, 10);

        await prisma.user.update({
            where: { id: user.id },
            data: {
                password: hashedPassword,
                otp: null,
                otpExpiry: null,
            },
        });

        return NextResponse.json(
            { message: 'üéâ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà' },
            { status: 200 }
        );
    } catch (error) {
        console.error('‚ùå PATCH reset-password error:', error);
        return NextResponse.json(
            { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ' },
            { status: 500 }
        );
    }
}

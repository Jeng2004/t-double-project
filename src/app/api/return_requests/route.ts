import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// üïí ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
function formatToThaiTime(date: Date) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

/* -----------------------------------
   üì¶ GET: ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)
----------------------------------- */
export async function GET(_req: NextRequest) {
  try {
    const requests = await prisma.returnRequest.findMany({
      orderBy: { createdAt: "desc" },
      include: {
        items: {
          include: { orderItem: { include: { product: true } } },
        },
        order: { include: { user: true } },
      },
    });

    // üîÑ map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ null
    const formattedRequests = requests.map((r) => ({
      ...r,
      category: r.category ?? "",
      createdAt: formatToThaiTime(r.createdAt),
      updatedAt: formatToThaiTime(r.updatedAt),
    }));

    return NextResponse.json(formattedRequests, { status: 200 });
  } catch (err) {
    console.error("‚ùå GET ReturnRequests error:", err);
    return NextResponse.json(
      { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}
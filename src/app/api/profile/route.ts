export const runtime = 'nodejs';

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import fs from 'fs/promises';
import path from 'path';

const prisma = new PrismaClient();

// üü¢ GET Profile
export async function GET(req: NextRequest) {
    const userId = req.nextUrl.searchParams.get('userId'); // üü¢ ‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å query param

    if (!userId) {
        return NextResponse.json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId' }, { status: 400 });
    }

    try {
        const user = await prisma.user.findUnique({
            where: { id: userId },
            select: {
                name: true,
                email: true,
                phone: true,
                address: true,
                profileImage: true,
                createdAt: true
            }
        });

        if (!user) {
            return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }, { status: 404 });
        }

        return NextResponse.json({ user }, { status: 200 });
    } catch (err) {
        console.error('‚ùå GET profile error:', err);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

// üü° PATCH Profile (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç name, phone, address, ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏î‡πâ)
export async function PATCH(req: NextRequest) {
    const formData = await req.formData();
    const userId = formData.get('userId')?.toString();
    const name = formData.get('name')?.toString();
    const phone = formData.get('phone')?.toString();
    const address = formData.get('address')?.toString();
    const removeProfileImage = formData.get('removeProfileImage') === 'true';
    const file = formData.get('profileImage') as File | null;

    if (!userId) {
        return NextResponse.json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId' }, { status: 400 });
    }

    try {
        const user = await prisma.user.findUnique({ where: { id: userId } });
        if (!user) {
            return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ' }, { status: 404 });
        }

        let profileImageUrl = user.profileImage;

        // üóë ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤ removeProfileImage ‡πÄ‡∏õ‡πá‡∏ô true
        if (removeProfileImage && profileImageUrl) {
            const oldImagePath = path.join(process.cwd(), 'public', profileImageUrl);
            try {
                await fs.unlink(oldImagePath);
                console.log('üóë ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß:', oldImagePath);
            } catch (err) {
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏•‡∏ö:', oldImagePath);
            }
            profileImageUrl = null;
        }

        // üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (file && file.size > 0) {
            const bytes = await file.arrayBuffer();
            const buffer = Buffer.from(bytes);

            const uploadsDir = path.join(process.cwd(), 'public', 'uploads');
            await fs.mkdir(uploadsDir, { recursive: true });

            const fileName = `${user.username}-${Date.now()}${path.extname(file.name)}`;
            const filePath = path.join(uploadsDir, fileName);

            await fs.writeFile(filePath, buffer);

            profileImageUrl = `/uploads/${fileName}`;
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DB
        const updatedUser = await prisma.user.update({
            where: { id: userId },
            data: {
                name: name === '' ? null : name || undefined,
                phone: phone === '' ? null : phone || undefined,
                address: address === '' ? null : address || undefined,
                profileImage: profileImageUrl
            },
            select: {
                name: true,
                email: true,
                phone: true,
                address: true,
                profileImage: true,
                createdAt: true
            }
        });

        return NextResponse.json(
            { message: '‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', user: updatedUser },
            { status: 200 }
        );
    } catch (err) {
        console.error('‚ùå PATCH profile error:', err);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

// üî¥ DELETE Profile Image (‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå)
export async function DELETE(req: NextRequest) {
    const userId = req.nextUrl.searchParams.get('userId');

    if (!userId) {
        return NextResponse.json({ error: '‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId' }, { status: 400 });
    }

    try {
        const user = await prisma.user.findUnique({ where: { id: userId } });
        if (!user) {
            return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ' }, { status: 404 });
        }

        if (user.profileImage) {
            const oldImagePath = path.join(process.cwd(), 'public', user.profileImage);
            try {
                await fs.unlink(oldImagePath);
                console.log('üóë ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß:', oldImagePath);
            } catch (err) {
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏•‡∏ö:', oldImagePath);
            }
        }

        const updatedUser = await prisma.user.update({
            where: { id: userId },
            data: { profileImage: null },
            select: {
                name: true,
                email: true,
                phone: true,
                address: true,
                profileImage: true,
                createdAt: true
            }
        });

        return NextResponse.json(
            { message: 'üóë ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', user: updatedUser },
            { status: 200 }
        );
    } catch (err) {
        console.error('‚ùå DELETE profile image error:', err);
        return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ' }, { status: 500 });
    }
}

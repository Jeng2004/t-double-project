import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { PrismaClient } from '@prisma/client';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!); // ‡πÉ‡∏ä‡πâ default apiVersion
const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    console.log('üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á POST /api/payment');

    const { userId, items } = await req.json();
    console.log('üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤:', { userId, items });

    if (!userId || !Array.isArray(items) || items.length === 0) {
      console.warn('‚ö†Ô∏è userId ‡∏´‡∏£‡∏∑‡∏≠ items ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return NextResponse.json({ error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' }, { status: 400 });
    }

    console.log('üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á lineItems ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Stripe...');
    const lineItems = await Promise.all(
      items.map(async (item: any, index: number) => {
        const product = await prisma.product.findUnique({
          where: { id: item.productId },
        });

        if (!product) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.productId}`);
          throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.productId}`);
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ product.price ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const priceObject = product.price as Record<string, number> | null;
        if (!priceObject) {
          console.error(`‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:`, product.price);
          throw new Error(`‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
        }

        // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const selectedPrice = priceObject[item.size];

        if (!selectedPrice) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î ${item.size} ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name}`);
          throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î ${item.size}`);
        }

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á imageUrls
        const imageUrls =
          product.imageUrls?.map((url) =>
            url.startsWith('http') ? url : `${process.env.APP_URL}${url}`
          ) || ['https://via.placeholder.com/150'];

        // ‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô number
        const priceNumber = Number(selectedPrice);

        // ‡∏ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        if (isNaN(priceNumber)) {
          console.error(`‚ùå ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name} ‡∏Ç‡∏ô‡∏≤‡∏î ${item.size} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:`, selectedPrice);
          throw new Error(`‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${product.name} ‡∏Ç‡∏ô‡∏≤‡∏î ${item.size} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
        }

        const itemLog = {
          name: product.name,
          price: priceNumber,
          image: imageUrls[0],
          quantity: item.quantity,
        };
        console.log(`‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1}:`, itemLog);

        return {
          price_data: {
            currency: 'thb',
            product_data: {
              name: product.name,
              images: imageUrls,
            },
            unit_amount: Math.round(priceNumber * 100), // üëà ‡πÉ‡∏ä‡πâ number ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          },
          quantity: item.quantity,
        };
      })
    );

    const successUrl = `${process.env.APP_URL}/payment/success`;
    const cancelUrl = `${process.env.APP_URL}/payment/cancel`;

    console.log('üßæ lineItems ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Stripe:', lineItems);
    console.log('üåê URL Success:', successUrl);
    console.log('üåê URL Cancel:', cancelUrl);

    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: successUrl,
      cancel_url: cancelUrl,
      metadata: {
        userId,
      },
      payment_intent_data: {
        capture_method: 'manual', // ‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      },
    });

    console.log('‚úÖ Checkout session ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à:', session.id);
    console.log('üîó session.url:', session.url);

    return NextResponse.json({ url: session.url }, { status: 200 });
  } catch (error: any) {
    console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Checkout session ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    return NextResponse.json(
      { error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÑ‡∏î‡πâ' },
      { status: 500 }
    );
  }
}

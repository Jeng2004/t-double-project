// src/app/api/cart/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// üìù Logger helpers
const logPrefix = "üß∫ CartAPI";
const log = (...args: any[]) => console.log(logPrefix, ...args);
const info = (...args: any[]) => console.info(logPrefix, ...args);
const warn = (...args: any[]) => console.warn(logPrefix, ...args);

// ---------- GET - ‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á user ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ + stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ----------
export async function GET(req: NextRequest) {
  const userId = req.nextUrl.searchParams.get("userId");
  info("GET /api/cart", { userId });

  if (!userId) {
    warn("GET missing userId");
    return NextResponse.json(
      { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÉ‡∏ô query string" },
      { status: 400 }
    );
  }

  try {
    const cartItems = await prisma.cartItem.findMany({
      where: { userId },
      include: { product: true }, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏ß‡∏° price ‡πÅ‡∏•‡∏∞ stock object)
    });
    info("GET cartItems count:", cartItems.length);

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏ï‡πá‡∏≠‡∏Å (size) ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const toRemoveIds: string[] = [];

    const enrichedItems = cartItems.map((item) => {
      const size = item.size as keyof typeof item.product.price;
      const unitPrice = (item.product?.price as any)?.[size] ?? 0;
      const totalPrice = unitPrice * item.quantity;

      // ‡∏î‡∏∂‡∏á stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á size ‡∏ô‡∏µ‡πâ
      const stockBySize = (item.product?.stock || {}) as Record<string, number>;
      const availableStock = stockBySize?.[size as string] ?? 0;

      log("GET item", {
        cartItemId: item.id,
        productId: item.productId,
        size,
        qty: item.quantity,
        unitPrice,
        availableStock,
      });

      if (availableStock === 0) {
        toRemoveIds.push(item.id);
      }

      return {
        ...item,
        unitPrice,
        totalPrice,
        availableStock, // ‡πÄ‡∏û‡∏¥‡πà‡∏° field stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      };
    });

    if (toRemoveIds.length > 0) {
      warn("GET removing out-of-stock cart items", { toRemoveIds });
      const delRes = await prisma.cartItem.deleteMany({
        where: { id: { in: toRemoveIds } },
      });
      info("GET deleteMany result:", delRes);
    }

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å
    const itemsAfterCleanup = enrichedItems.filter((i) => i.availableStock > 0);
    info("GET returning items after cleanup:", itemsAfterCleanup.length);

    return NextResponse.json(itemsAfterCleanup, { status: 200 });
  } catch (err) {
    console.error("‚ùå GET cart error:", err);
    return NextResponse.json(
      { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}

// ---------- POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö stock ‡πÅ‡∏•‡∏∞‡∏•‡∏î stock ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô DB ----------
export async function POST(req: NextRequest) {
  const body = await req.json();
  const { userId, productId, quantity, size } = body;
  info("POST /api/cart", { userId, productId, quantity, size });

  if (!userId || !productId || !size || Number(quantity) <= 0) {
    warn("POST invalid payload", body);
    return NextResponse.json(
      { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠ quantity/size ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
      { status: 400 }
    );
  }

  try {
    // 1) ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (fresh)
    const product = await prisma.product.findUnique({ where: { id: productId } });
    if (!product) {
      warn("POST product not found", { productId });
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }

    const stockBySize = (product.stock || {}) as Record<string, number>;
    const availableStock = Number.isFinite(Number(stockBySize?.[size])) ? Number(stockBySize[size]) : 0;
    info("POST stock check", { productId, size, availableStock });

    if (availableStock === 0) {
      // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÜ -> ‡∏•‡∏ö item ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      warn("POST out of stock -> clearing existing cartItem", { userId, productId, size });
      await prisma.cartItem.deleteMany({ where: { userId, productId, size } });
      return NextResponse.json(
        { error: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß" },
        { status: 410 }
      );
    }

    // 2) ‡∏´‡∏≤ cart item ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á user ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö product+size
    const existingItem = await prisma.cartItem.findFirst({
      where: { userId, productId, size },
    });

    const requestedQtyTotal = existingItem ? existingItem.quantity + Number(quantity) : Number(quantity);
    if (requestedQtyTotal > availableStock) {
      warn("POST insufficient stock", { requestedQtyTotal, availableStock });
      return NextResponse.json(
        { error: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${availableStock})` },
        { status: 409 }
      );
    }

    // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cartItem
    const sizeKey = size as keyof typeof product.price;
    const unitPrice = (product.price as any)?.[sizeKey] ?? 0;

    let cartResult;
    if (existingItem) {
      const newQty = existingItem.quantity + Number(quantity);
      const newTotalPrice = Number(unitPrice) * newQty;
      cartResult = await prisma.cartItem.update({
        where: { id: existingItem.id },
        data: { quantity: newQty, unitPrice, totalPrice: newTotalPrice },
      });
    } else {
      const totalPrice = Number(unitPrice) * Number(quantity);
      cartResult = await prisma.cartItem.create({
        data: {
          userId,
          productId,
          quantity: Number(quantity),
          size,
          unitPrice,
          totalPrice,
        },
      });
    }

    // 4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡πÉ‡∏ô product (‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤)
    // ‡∏≠‡πà‡∏≤‡∏ô stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
    const freshProduct = await prisma.product.findUnique({ where: { id: productId } });
    const freshStock = (freshProduct?.stock || {}) as Record<string, number>;
    const prevVal = Number.isFinite(Number(freshStock[size])) ? Number(freshStock[size]) : 0;
    const newVal = Math.max(0, prevVal - Number(quantity));
    const newStockObj = { ...(freshStock || {}) };
    newStockObj[size] = newVal;

    await prisma.product.update({
      where: { id: productId },
      data: { stock: newStockObj },
    });

    info("POST updated stock for product", { productId, size, prevVal, newVal });

    // 5) ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (‡∏£‡∏ß‡∏° stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ client ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
    return NextResponse.json(
      {
        ...cartResult,
        unitPrice,
        totalPrice: unitPrice * (existingItem ? existingItem.quantity + Number(quantity) : Number(quantity)),
        message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        productStock: newStockObj,
      },
      { status: 201 }
    );
  } catch (err) {
    console.error("‚ùå POST cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// ---------- PATCH - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö stock ‡πÉ‡∏ô DB ----------
export async function PATCH(req: NextRequest) {
  const body = await req.json();
  const { userId, productId, quantity, size } = body;
  info("PATCH /api/cart", { userId, productId, quantity, size });

  if (!userId || !productId || !size || typeof quantity !== "number" || quantity < 0) {
    warn("PATCH invalid payload", body);
    return NextResponse.json(
      { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠ quantity/size ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
      { status: 400 }
    );
  }

  try {
    const existingCartItem = await prisma.cartItem.findFirst({
      where: { userId, productId, size },
    });
    if (!existingCartItem) {
      warn("PATCH cartItem not found", { userId, productId, size });
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤" }, { status: 404 });
    }

    const product = await prisma.product.findUnique({ where: { id: productId } });
    if (!product) {
      warn("PATCH product not found", { productId });
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }

    const stockBySize = (product.stock || {}) as Record<string, number>;
    const availableStock = Number.isFinite(Number(stockBySize?.[size])) ? Number(stockBySize[size]) : 0;
    info("PATCH stock check", { productId, size, availableStock });

    // diff = newQuantity - oldQuantity
    const diff = Number(quantity) - existingCartItem.quantity;

    if (diff > 0) {
      // ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ -> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ >= diff)
      if (diff > availableStock) {
        warn("PATCH insufficient stock", { diff, availableStock });
        return NextResponse.json({ error: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" }, { status: 409 });
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cart item
    if (quantity === 0) {
      // ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á 0 -> ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      await prisma.cartItem.deleteMany({ where: { userId, productId, size } });
    } else {
      await prisma.cartItem.updateMany({
        where: { userId, productId, size },
        data: {
          quantity,
          unitPrice: (product.price as any)?.[size] ?? 0,
          totalPrice: ((product.price as any)?.[size] ?? 0) * quantity,
        },
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡πÉ‡∏ô product ‡∏ï‡∏≤‡∏° diff (‡∏ñ‡πâ‡∏≤ diff>0 ‡∏•‡∏î stock; ‡∏ñ‡πâ‡∏≤ diff<0 ‡∏Ñ‡∏∑‡∏ô stock)
    const freshProduct = await prisma.product.findUnique({ where: { id: productId } });
    const freshStock = (freshProduct?.stock || {}) as Record<string, number>;
    const prevVal = Number.isFinite(Number(freshStock[size])) ? Number(freshStock[size]) : 0;
    const updatedStockForSize = Math.max(0, prevVal - Math.max(0, diff)); // ‡∏ñ‡πâ‡∏≤ diff>0 ‡∏•‡∏î by diff; ‡∏ñ‡πâ‡∏≤ diff<=0 ‡πÑ‡∏°‡πà‡∏•‡∏î
    // ‡∏´‡∏≤‡∏Å diff < 0 (‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô stock‡πÅ‡∏ó‡∏ô:
    const finalStockVal = diff < 0 ? prevVal + Math.abs(diff) : updatedStockForSize;
    const newStockObj = { ...(freshStock || {}) };
    newStockObj[size] = finalStockVal;

    await prisma.product.update({
      where: { id: productId },
      data: { stock: newStockObj },
    });

    info("PATCH updated stock for product", { productId, size, prevVal, finalStockVal });

    return NextResponse.json(
      { message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", size, quantity, productStock: newStockObj },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå PATCH cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// ---------- DELETE - ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ + ‡∏Ñ‡∏∑‡∏ô stock ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ----------
export async function DELETE(req: NextRequest) {
  const body = await req.json();
  const { userId, productId, size } = body;
  info("DELETE /api/cart", { userId, productId, size });

  if (!userId || !productId || !size) {
    warn("DELETE invalid payload", body);
    return NextResponse.json(
      { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (userId, productId, size)" },
      { status: 400 }
    );
  }

  try {
    // ‡∏´‡∏≤ cart item ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å
    const existingCartItem = await prisma.cartItem.findFirst({
      where: { userId, productId, size },
    });

    if (!existingCartItem) {
      warn("DELETE cartItem not found", { userId, productId, size });
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤" }, { status: 404 });
    }

    const restoreQty = existingCartItem.quantity;

    // ‡∏•‡∏ö item ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
    const deleted = await prisma.cartItem.deleteMany({
      where: { userId, productId, size },
    });
    info("DELETE deleteMany result:", deleted);

    // ‡∏Ñ‡∏∑‡∏ô stock ‡πÉ‡∏´‡πâ product ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô cart
    const product = await prisma.product.findUnique({ where: { id: productId } });
    const freshStock = (product?.stock || {}) as Record<string, number>;
    const prevVal = Number.isFinite(Number(freshStock[size])) ? Number(freshStock[size]) : 0;
    const newVal = prevVal + restoreQty;
    const newStockObj = { ...(freshStock || {}) };
    newStockObj[size] = newVal;

    await prisma.product.update({
      where: { id: productId },
      data: { stock: newStockObj },
    });

    info("DELETE restored stock for product", { productId, size, prevVal, newVal });

    return NextResponse.json(
      {
        message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß",
        productId,
        size,
        availableStock: newVal,
      },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå DELETE cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

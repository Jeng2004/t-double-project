import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// üì¶ GET - ‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á user ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
export async function GET(req: NextRequest) {
  const userId = req.nextUrl.searchParams.get("userId");

  if (!userId) {
    return NextResponse.json(
      { error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userId ‡πÉ‡∏ô query string" },
      { status: 400 }
    );
  }

  try {
    const cartItems = await prisma.cartItem.findMany({
      where: { userId },
      include: { product: true }, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏ß‡∏° price object)
    });

    const enrichedItems = cartItems.map((item) => {
      const size = item.size as keyof typeof item.product.price;
      const unitPrice = item.product?.price?.[size] ?? 0;
      const totalPrice = item.unitPrice * item.quantity; // ‡πÉ‡∏ä‡πâ unitPrice ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

      return {
        ...item,
        unitPrice,
        totalPrice,
      };
    });

    return NextResponse.json(enrichedItems, { status: 200 });
  } catch (err) {
    console.error("‚ùå GET cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// ‚ûï POST - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏° unitPrice ‡πÅ‡∏•‡∏∞ totalPrice
export async function POST(req: NextRequest) {
  const { userId, productId, quantity, size } = await req.json();

  if (!userId || !productId || quantity <= 0 || !size) {
    return NextResponse.json(
      { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠ quantity/size ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
      { status: 400 }
    );
  }

  try {
    const product = await prisma.product.findUnique({ where: { id: productId } });
    if (!product) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }

    const sizeKey = size as keyof typeof product.price;
    const unitPrice = product.price?.[sizeKey] ?? 0;
    const totalPrice = unitPrice * quantity;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingItem = await prisma.cartItem.findFirst({
      where: { userId, productId, size },
    });

    let result;
    if (existingItem) {
      result = await prisma.cartItem.update({
        where: { id: existingItem.id },
        data: {
          quantity: existingItem.quantity + quantity,
          unitPrice,
          totalPrice, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï unitPrice ‡πÅ‡∏•‡∏∞ totalPrice
        },
      });
    } else {
      result = await prisma.cartItem.create({
        data: {
          userId,
          productId,
          quantity,
          size,
          unitPrice,
          totalPrice, // ‡πÄ‡∏Å‡πá‡∏ö unitPrice ‡πÅ‡∏•‡∏∞ totalPrice ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        },
      });
    }

    return NextResponse.json(
      {
        ...result,
        unitPrice,
        totalPrice,
        message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      },
      { status: 201 }
    );
  } catch (err) {
    console.error("‚ùå POST cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// üîÑ PATCH - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
export async function PATCH(req: NextRequest) {
  const { userId, productId, quantity, size } = await req.json();

  if (!userId || !productId || quantity < 0 || !size) {
    return NextResponse.json(
      { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠ quantity/size ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
      { status: 400 }
    );
  }

  try {
    const product = await prisma.product.findUnique({ where: { id: productId } });
    if (!product) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" }, { status: 404 });
    }

    const unitPrice = (product.price as Record<string, number>)[size];

    if (typeof unitPrice !== "number") {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡πÑ‡∏ã‡∏™‡πå‡∏ô‡∏µ‡πâ" }, { status: 400 });
    }

    if (quantity === 0) {
      await prisma.cartItem.deleteMany({ where: { userId, productId, size } });
      return NextResponse.json({ message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" }, { status: 200 });
    }

    const updated = await prisma.cartItem.updateMany({
      where: { userId, productId, size },
      data: { quantity },
    });

    if (updated.count === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤" }, { status: 404 });
    }

    return NextResponse.json(
      {
        message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        size,
        quantity,
        unitPrice,
        total: unitPrice * quantity,
      },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå PATCH cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// üóë DELETE - ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
export async function DELETE(req: NextRequest) {
  const { userId, productId, size } = await req.json();

  if (!userId || !productId || !size) {
    return NextResponse.json(
      { error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö (userId, productId, size)" },
      { status: 400 }
    );
  }

  try {
    const deleted = await prisma.cartItem.deleteMany({
      where: { userId, productId, size },
    });

    if (deleted.count === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤" }, { status: 404 });
    }

    return NextResponse.json({ message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" }, { status: 200 });
  } catch (err) {
    console.error("‚ùå DELETE cart error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

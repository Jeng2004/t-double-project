import { PrismaClient } from "@prisma/client";
import { NextRequest, NextResponse } from "next/server";
import PDFDocument from "pdfkit";
import fs from "fs";
import path from "path";

const prisma = new PrismaClient();

// ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ ----------------------
function formatToThaiTime(date: Date) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

// ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ PDF ----------------------
async function generateSlip(order: any): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const buffers: Buffer[] = [];

      // ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÄ‡∏ä‡πà‡∏ô NotoSansThai-Regular.ttf
      const fontPath = path.join(process.cwd(), "public", "fonts", "NotoSansThai-Regular.ttf");

      if (!fs.existsSync(fontPath)) {
        throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå NotoSansThai-Regular.ttf");
      }

      const doc = new PDFDocument({
        size: "A4",
        margin: 50,
        font: fontPath,
      });

      doc.registerFont("NotoThai", fontPath);
      doc.font("NotoThai");

      doc.on("data", buffers.push.bind(buffers));
      doc.on("end", () => resolve(Buffer.concat(buffers)));

      // Header
      doc.fontSize(20).text("‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô / Payment Slip", { align: "center" });
      doc.moveDown(2); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠

      // Order Info
      doc.fontSize(12).text(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${order.id}`);
      doc.moveDown(0.5); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
      doc.text(`Tracking ID: ${order.trackingId}`);
      doc.moveDown(0.5);
      doc.text(`‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${order.user?.name ?? "-"}`);
      doc.moveDown(0.5);
      doc.text(`‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${order.user?.email ?? "-"}`);
      doc.moveDown(0.5);
      doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatToThaiTime(order.createdAt)}`);
      doc.moveDown(1); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

      // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      doc.fontSize(14).text("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:");
      doc.moveDown(1); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á

      order.orderItems.forEach((item: any, index: number) => {
        doc.fontSize(12).text(
          `${index + 1}. ${item.product.name} (${item.size}) x ${item.quantity} - ${item.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó`
        );
        doc.moveDown(0.5); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      });

      doc.moveDown(1); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
      doc.fontSize(14).text(`üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${order.totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, {
        align: "right",
      });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

// ---------------------- API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ ----------------------

// POST: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const orderId: string = body?.orderId;

    if (!orderId) {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ orderId" }, { status: 400 });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: { orderItems: { include: { product: true } }, user: true },
    });

    if (!order) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ PDF
    const pdfBuffer = await generateSlip(order);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const slip = await prisma.slip.create({
      data: {
        orderId: order.id,
        userId: order.user?.id ?? '',
        pdfData: pdfBuffer, // ‡πÄ‡∏Å‡πá‡∏ö PDF ‡πÄ‡∏õ‡πá‡∏ô Buffer
      },
    });

    // ‡∏™‡πà‡∏á PDF ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô response
    return new NextResponse(Buffer.from(pdfBuffer), {  // ‡πÅ‡∏õ‡∏•‡∏á Buffer ‡πÄ‡∏õ‡πá‡∏ô Uint8Array
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `inline; filename=slip-${orderId}.pdf`,
        "Cache-Control": "no-store",
      },
    });
  } catch (err) {
    console.error("‚ùå Error generating slip:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// ---------------------- API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏•‡∏¥‡∏õ ----------------------

// GET: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏™‡∏•‡∏¥‡∏õ
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const orderId = searchParams.get("orderId");

    if (!orderId) {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ orderId" }, { status: 400 });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏•‡∏¥‡∏õ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `orderId`
    const slip = await prisma.slip.findFirst({
      where: { orderId: orderId }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å orderId
    });

    if (!slip) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ" }, { status: 404 });
    }

    // ‡∏™‡πà‡∏á PDF ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô response
    return new NextResponse(Buffer.from(slip.pdfData), {  // ‡πÅ‡∏õ‡∏•‡∏á pdfData ‡πÄ‡∏õ‡πá‡∏ô Uint8Array
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `inline; filename=slip-${orderId}.pdf`,
        "Cache-Control": "no-store",
      },
    });
  } catch (err) {
    console.error("‚ùå Error retrieving slip:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

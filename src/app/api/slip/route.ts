import { NextRequest, NextResponse } from "next/server";
import PDFDocument from "pdfkit";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
import fs from "fs";
import path from "path";

const prisma = new PrismaClient();

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ */
function formatToThaiTime(date: Date) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏™‡∏•‡∏¥‡∏õ */
async function generateSlip(order: any): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const buffers: Buffer[] = [];
      const fontPath = path.join(
        process.cwd(),
        "public",
        "fonts",
        "NotoSansThai-Regular.ttf"
      );

      if (!fs.existsSync(fontPath)) {
        throw new Error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå NotoSansThai-Regular.ttf ‡∏ó‡∏µ‡πà public/fonts/");
      }

      const doc = new PDFDocument({
        size: "A4",
        margin: 50,
        autoFirstPage: false, // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      });

      doc.on("data", buffers.push.bind(buffers));
      doc.on("end", () => resolve(Buffer.concat(buffers)));

      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
      doc.registerFont("NotoThai", fontPath);

      // ‚úÖ addPage ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      doc.addPage({ margin: 50 }).font("NotoThai");

      // Header
      doc.fontSize(20).text("‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô / Payment Slip", { align: "center" });
      doc.moveDown();

      // Order Info
      doc.fontSize(12).text(`‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${order.id}`);
      doc.text(`Tracking ID: ${order.trackingId}`);
      doc.text(`‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${order.user?.name ?? "-"}`);
      doc.text(`‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${order.user?.email ?? "-"}`);
      doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatToThaiTime(order.createdAt)}`);
      doc.moveDown();

      // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      doc.fontSize(14).text("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:");
      doc.moveDown();

      order.orderItems.forEach((item: any, index: number) => {
        doc.fontSize(12).text(
          `${index + 1}. ${item.product.name} (${item.size}) x ${item.quantity} - ${item.totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó`
        );
      });

      doc.moveDown();
      doc
        .fontSize(14)
        .text(`üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${order.totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`, {
          align: "right",
        });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Email ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ */
async function sendSlipEmail(to: string, buffer: Buffer, orderId: string) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: `"T-Double" <${process.env.EMAIL_USER}>`,
    to,
    subject: `‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order #${orderId}`,
    text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤",
    attachments: [
      {
        filename: `slip-${orderId}.pdf`,
        content: buffer,
      },
    ],
  });
}

/** API POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á + ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ */
export async function POST(req: NextRequest) {
  try {
    const { orderId } = await req.json();

    if (!orderId) {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ orderId" }, { status: 400 });
    }

    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: { orderItems: { include: { product: true } }, user: true },
    });

    if (!order) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }
    if (!order.isPaid) {
      return NextResponse.json(
        { error: "‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" },
        { status: 400 }
      );
    }

    // ‚úÖ Generate Slip
    const pdfBuffer = await generateSlip(order);

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    if (order.user?.email) {
      await sendSlipEmail(order.user.email, pdfBuffer, order.id);
    }

    // ‚úÖ ‡∏™‡πà‡∏á PDF ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô response
    return new NextResponse(new Uint8Array(pdfBuffer), {
      status: 200,
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `inline; filename=slip-${order.id}.pdf`,
      },
    });
  } catch (err) {
    console.error("‚ùå Error generating slip:", err);
    return NextResponse.json(
      { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}

// src/app/api/special-orders/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
// üîπ ADD: Stripe ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
import Stripe from "stripe";

const prisma = new PrismaClient();

// üîπ ADD: Stripe client (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Stripe API)
const stripe =
  process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY) : null;

// üìù LOG: helpers (‡πÄ‡∏û‡∏¥‡πà‡∏°)
const LOG_PREFIX = "üì¶ SpecialOrdersAPI";
const log  = (...a: any[]) => console.log(LOG_PREFIX, ...a);
const info = (...a: any[]) => console.info(LOG_PREFIX, ...a);
const warn = (...a: any[]) => console.warn(LOG_PREFIX, ...a);
const err  = (...a: any[]) => console.error(LOG_PREFIX, ...a);

const allowedStatus = [
  "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
  // üîπ ADD: ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
  "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß",
] as const;
type OrderStatus = (typeof allowedStatus)[number];

// üîπ ADD: flow ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
const flow: Exclude<OrderStatus, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">[] = [
  // üîπ ADD: ‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£)
  "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
  "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß",
];

// üîπ ADD: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö + ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô
function canTransition(current: OrderStatus, next: OrderStatus) {
  // üìù LOG:
  log("canTransition called", { current, next });

  if (current === next) {
    const reason = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ ("${current}")`;
    warn("canTransition blocked: same status", { reason });
    return { ok: false as const, reason };
  }
  if (current === "‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß" || current === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å") {
    const reason = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å "${current}" ‡πÑ‡∏î‡πâ`;
    warn("canTransition blocked: terminal state", { reason });
    return { ok: false as const, reason };
  }

  // üîπ ‡πÄ‡∏î‡∏¥‡∏°: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï cancel (‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô PATCH ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏∏‡∏ì)
  if (next === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å") {
    info("canTransition allowed: cancel");
    return { ok: true as const };
  }

  // üîπ ADD: ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" (‡∏•‡πá‡∏≠‡∏Ñ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  if (next === "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô") {
    const reason = `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" ‡πÑ‡∏î‡πâ`;
    warn("canTransition blocked: disallow pending-payment", { reason });
    return { ok: false as const, reason };
  }

  const curIdx = flow.indexOf(current as (typeof flow)[number]);
  const nextIdx = flow.indexOf(next as (typeof flow)[number]);
  log("canTransition indices", { curIdx, nextIdx });

  if (curIdx === -1 || nextIdx === -1) {
    const reason = "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    warn("canTransition blocked: invalid status in flow", { reason });
    return { ok: false as const, reason };
  }
  if (nextIdx === curIdx + 1) {
    info("canTransition allowed: next step");
    return { ok: true as const };
  }

  const reason = `‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô: "${flow.join('" ‚Üí "')}" (‡∏´‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö)`;
  warn("canTransition blocked: skipping/backward", { reason });
  return { ok: false as const, reason };
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ */
function formatToThaiTime(date: Date | string) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏°‡∏• */
async function sendEmail(to: string, subject: string, html: string) {
  // üìù LOG:
  info("sendEmail init", { to, subject });

  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER!,
      pass: process.env.EMAIL_PASS!,
    },
  });

  const mailPayload = {
    from: `"T-Double" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    html,
  };

  // üìù LOG:
  log("sendEmail payload prepared");

  await transporter.sendMail(mailPayload);

  // üìù LOG:
  info("sendEmail sent");
}

// üîπ ADD: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ‚Äú‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß‚Äù ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
async function isOrderPaid(order: any): Promise<boolean> {
  try {
    // ‡πÄ‡∏Ñ‡∏™ 1: ‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô DB (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const paidFlags = ["paid", "succeeded", "‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß"];
    if (order.paymentStatus && paidFlags.includes(String(order.paymentStatus).toLowerCase())) {
      info("isOrderPaid: from DB flag", { paymentStatus: order.paymentStatus });
      return true;
    }

    // ‡πÄ‡∏Ñ‡∏™ 2: ‡∏°‡∏µ paymentIntentId ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå Stripe ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å Stripe
    if (order.paymentIntentId && stripe) {
      info("isOrderPaid: checking Stripe", { paymentIntentId: order.paymentIntentId });
      const pi = await stripe.paymentIntents.retrieve(order.paymentIntentId);
      const ok = pi.status === "succeeded";
      info("isOrderPaid: stripe result", { status: pi.status, ok });
      return ok;
    }

    // ‡πÄ‡∏Ñ‡∏™ 3: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
    warn("isOrderPaid: no payment proof found", {
      hasPaymentStatus: !!order.paymentStatus,
      hasPI: !!order.paymentIntentId,
      stripeEnabled: !!stripe,
    });
    return false;
  } catch (e) {
    err("isOrderPaid error", e);
    return false;
  }
}

/** ------------------ PATCH: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏•‡πå ------------------ */
export async function PATCH(
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    console.log("üìå PATCH /special-orders id:", id);
    info("PATCH start", { id });

    const body = await req.json();
    const { status } = body as { status: string };

    // üìù LOG:
    log("PATCH payload", { status });

    if (!status || !allowedStatus.includes(status as OrderStatus)) {
      warn("PATCH invalid status", { status, allowedStatus });
      return NextResponse.json(
        { error: `status ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô: ${allowedStatus.join(", ")}` },
        { status: 400 }
      );
    }

    // üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ order ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°
    const existing = await prisma.specialOrder.findUnique({ where: { id } });
    console.log("üí° Existing order:", existing);
    log("PATCH existing fetched", { found: !!existing });

    if (!existing) {
      warn("PATCH not found", { id });
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }

    // üîπ ADD: ‡∏ö‡∏•‡πá‡∏≠‡∏Å "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡πÅ‡∏•‡∏∞ "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô PATCH
    if (status === "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" || status === "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô") {
      warn("PATCH blocked status", { id, from: existing.status, to: status });
      return NextResponse.json(
        { error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "${status}" ‡πÑ‡∏î‡πâ` },
        { status: 400 }
      );
    }

    // üîπ ADD: ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ
    const paid = await isOrderPaid(existing);
    if (!paid) {
      warn("PATCH blocked: unpaid order", { id, tryingTo: status });
      return NextResponse.json(
        { error: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" },
        { status: 403 }
      );
    }

    // üîπ ‡πÄ‡∏î‡∏¥‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ + ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    const currentStatus = existing.status as OrderStatus;
    const check = canTransition(currentStatus, status as OrderStatus);
    log("PATCH transition check", { from: currentStatus, to: status, ok: check.ok });

    if (!check.ok) {
      warn("PATCH transition blocked", { reason: check.reason });
      return NextResponse.json({ error: check.reason }, { status: 400 });
    }

    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    info("PATCH updating order", { id, to: status });
    const order = await prisma.specialOrder.update({
      where: { id },
      data: { status },
      include: { user: true },
    });
    log("PATCH updated", { id: order.id, newStatus: order.status });

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    try {
      if (order.email) {
        info("PATCH send email try", { to: order.email, id: order.id });
        await sendEmail(
          order.email,
          `T-Double: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${order.id}`,
          `
            <h2>üì¢ ‡πÅ‡∏à‡πâ‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h2>
            <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <b>${order.firstName} ${order.lastName}</b></p>
            <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏õ‡πá‡∏ô: <b>${status}</b></p>
            <p><b>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó:</b> ${formatToThaiTime(new Date())}</p>
            <hr/>
            <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ üôè</p>
          `
        );
        info("PATCH email sent", { id: order.id });
      } else {
        warn("PATCH email skipped (no email on order)", { id: order.id });
      }
    } catch (mailErr) {
      err("‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", mailErr);
    }

    info("PATCH success", { id, status });

    return NextResponse.json(
      { message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏•‡πå", order },
      { status: 200 }
    );
  } catch (e: any) {
    err("‚ùå PATCH error:", e);
    return NextResponse.json(
      { error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ" },
      { status: 500 }
    );
  }
}

/** ------------------ GET: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ------------------ */
export async function GET(
  _req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    console.log("üìå GET /special-orders id:", id);
    info("GET start", { id });

    const order = await prisma.specialOrder.findUnique({
      where: { id },
      include: { user: true },
    });

    if (!order) {
      warn("GET not found", { id });
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }

    info("GET success", { id: order.id });
    return NextResponse.json(order, { status: 200 });
  } catch (e: any) {
    err("‚ùå GET error:", e);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

// src/app/api/special-orders/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";
import Stripe from "stripe";

const prisma = new PrismaClient();
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ENV

/** Helper: ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ */
function formatToThaiTime(date: Date | string) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

/** Helper: ‡∏™‡∏£‡πâ‡∏≤‡∏á Tracking ID */
function generateTrackingId(base: string) {
  const random = Math.floor(1000 + Math.random() * 9000); // 4 ‡∏´‡∏•‡∏±‡∏Å
  return `TD-${String(base).slice(-6)}-${random}`;
}

/** Helper: ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• */
async function sendEmail(to: string | string[], subject: string, html: string) {
  if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
    console.warn("‚ö†Ô∏è EMAIL_USER/EMAIL_PASS not set. Skipping email send.");
    return;
  }
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
  });
  await transporter.sendMail({
    from: `"T-Double" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    html,
  });
}

/** ---------------- POST: ‡∏™‡∏£‡πâ‡∏≤‡∏á Special Order ---------------- */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const {
      firstName,
      lastName,
      phone,
      email,
      address,
      category,
      productName,
      color,
      quantity,
      sizeDetail,
      userId,
    } = body;

    // ‚úÖ Validate input
    if (
      !firstName ||
      !lastName ||
      !phone ||
      !email ||
      !address ||
      !category ||
      !productName ||
      !quantity ||
      !sizeDetail ||
      !userId
    ) {
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" }, { status: 400 });
    }
    if (quantity < 5) {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 5 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const user = await prisma.user.findUnique({ where: { id: userId } });
    if (!user) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)" }, { status: 404 });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    const order = await prisma.specialOrder.create({
      data: {
        firstName,
        lastName,
        phone,
        email,
        address,
        category,
        productName,
        color,
        quantity,
        sizeDetail,
        status: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        createdAtThai: formatToThaiTime(new Date()),
        trackingId: generateTrackingId(Date.now().toString()),
        userId,
      },
      include: { user: true },
    });

    // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    const whenThai = formatToThaiTime(new Date());
    try {
      await sendEmail(
        email,
        `T-Double: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #${order.id}`,
        `
          <h2>‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà</h2>
          <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <b>${firstName} ${lastName}</b></p>
          <p>‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß</p>
          <p><b>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</b> ${productName} (${color ?? "-"})</p>
          <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${quantity} ‡∏ï‡∏±‡∏ß</p>
          <p><b>Size:</b> ${sizeDetail}</p>
          <p><b>Tracking ID:</b> ${order.trackingId}</p>
          <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${whenThai}</p>
          <p>‚è≥ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡∏•‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 7‚Äì14 ‡∏ß‡∏±‡∏ô</p>
        `
      );
    } catch (e) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e);
    }

    return NextResponse.json({ message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order }, { status: 201 });
  } catch (err) {
    console.error("‚ùå Create Special Order error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/** ---------------- GET: ‡∏î‡∏∂‡∏á Special Order ---------------- */
export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");

    if (id) {
      const order = await prisma.specialOrder.findUnique({
        where: { id },
        include: { user: true },
      });
      if (!order) {
        return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
      }
      return NextResponse.json({ order }, { status: 200 });
    }

    const orders = await prisma.specialOrder.findMany({
      orderBy: { createdAt: "desc" },
      include: { user: true },
    });
    return NextResponse.json({ orders }, { status: 200 });
  } catch (err) {
    console.error("‚ùå GET Special Order error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/** ---------------- DELETE: ‡∏•‡∏ö Special Order ---------------- */
export async function DELETE(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (id)" }, { status: 400 });
    }

    const order = await prisma.specialOrder.findUnique({ where: { id } });
    if (!order) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }

    await prisma.specialOrder.delete({ where: { id } });
    return NextResponse.json({ message: "‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", id }, { status: 200 });
  } catch (err) {
    console.error("‚ùå DELETE Special Order error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

/** ---------------- PUT: ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö & ‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡∏™‡∏£‡πâ‡∏≤‡∏á Stripe Checkout ---------------- */
export async function PUT(req: NextRequest) {
  try {
    const { id, price } = await req.json();
    if (!id || !price) {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ id ‡πÅ‡∏•‡∏∞ price" }, { status: 400 });
    }

    const order = await prisma.specialOrder.findUnique({ where: { id } });
    if (!order) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" }, { status: 404 });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Stripe Checkout Session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ["card", "promptpay"],
      mode: "payment",
      line_items: [
        {
          price_data: {
            currency: "thb",
            product_data: {
              name: order.productName,
              description: `${order.category} - ${order.color ?? "-"}`,
            },
            unit_amount: Math.round(price * 100),
          },
          quantity: order.quantity,
        },
      ],
      success_url: `${process.env.NEXT_PUBLIC_BASE_URL}/success?orderId=${order.id}`,
      cancel_url: `${process.env.NEXT_PUBLIC_BASE_URL}/cancel?orderId=${order.id}`,
      metadata: { orderId: order.id, userId: order.userId ?? "" },
    });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    const updated = await prisma.specialOrder.update({
      where: { id },
      data: {
        price,
        isApproved: true,
        status: "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        paymentUrl: session.url!,
        trackingId: order.trackingId ?? generateTrackingId(order.id),
      },
    });

    // üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const whenThai = formatToThaiTime(new Date());
    try {
      if (updated.email) {
        await sendEmail(
          updated.email,
          `T-Double: ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô #${updated.id}`,
          `
            <h2>üí∞ ‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞</h2>
            <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <b>${updated.firstName} ${updated.lastName}</b></p>
            <p>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß</p>
            <p><b>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</b> ${updated.productName} (${updated.color ?? "-"})</p>
            <p><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${updated.quantity} ‡∏ï‡∏±‡∏ß</p>
            <p><b>Tracking ID:</b> ${updated.trackingId}</p>
            <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> ${whenThai}</p>
            <p>‡πÇ‡∏õ‡∏£‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï / PromptPay):</p>
            <a href="${session.url}">üëâ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</a>
          `
        );
      }
    } catch (e) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e);
    }

    return NextResponse.json(
      { message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", order: updated },
      { status: 200 }
    );
  } catch (err) {
    console.error("‚ùå Approve Special Order error:", err);
    return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" }, { status: 500 });
  }
}

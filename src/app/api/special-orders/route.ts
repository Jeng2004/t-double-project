// src/app/api/special-orders/route.ts
import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import nodemailer from "nodemailer";

const prisma = new PrismaClient();

/** ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ObjectId */
function looksLikeObjectId(id: unknown) {
  return typeof id === "string" && /^[a-fA-F0-9]{24}$/.test(id);
}

/** ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ */
function formatToThaiTime(date: Date | string) {
  return new Date(date).toLocaleString("th-TH", {
    timeZone: "Asia/Bangkok",
    hour12: false,
  });
}

/** Helper ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç */
function toInt(v: unknown, field: string) {
  const n = typeof v === "number" ? v : parseInt(String(v ?? ""), 10);
  if (Number.isNaN(n)) throw new Error(`‡∏ü‡∏¥‡∏•‡∏î‡πå ${field} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç`);
  return n;
}
function toFloat(v: unknown, field: string) {
  const n = typeof v === "number" ? v : parseFloat(String(v ?? ""));
  if (Number.isNaN(n)) throw new Error(`‡∏ü‡∏¥‡∏•‡∏î‡πå ${field} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç`);
  return n;
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏°‡∏•‡πå */
async function sendEmail(to: string, subject: string, html: string) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER, // üìå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env
      pass: process.env.EMAIL_PASS,
    },
  });

  await transporter.sendMail({
    from: `"T-Double" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    html,
  });
}

/** ------------------ POST ------------------ */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const {
      userId,
      email,
      firstName,
      lastName,
      phone,
      address,
      productType,
      model,
      quantity,
      sizeLabel,
      chest,
      length,
      notes,
      status,
    } = body ?? {};

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    let user = null as Awaited<ReturnType<typeof prisma.user.findUnique>>;
    if (userId) {
      if (!looksLikeObjectId(userId)) {
        return NextResponse.json({ error: "userId ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
      }
      user = await prisma.user.findUnique({ where: { id: userId } });
    } else if (email) {
      user = await prisma.user.findUnique({ where: { email } });
    } else {
      return NextResponse.json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId ‡∏´‡∏£‡∏∑‡∏≠ email" }, { status: 400 });
    }

    if (!user) return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" }, { status: 404 });
    if (user.status !== "active") return NextResponse.json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà active" }, { status: 403 });
    if (user.active === false) return NextResponse.json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" }, { status: 403 });

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏¥‡∏•‡∏î‡πå
    if (!firstName || !lastName || !phone || !address || !productType || !model || !sizeLabel) {
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" }, { status: 400 });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç
    const qty = toInt(quantity, "quantity");
    const chestNum = toFloat(chest, "chest");
    const lengthNum = toFloat(length, "length");
    if (qty < 10) {
      return NextResponse.json({ error: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 10 ‡∏ï‡∏±‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ã‡∏™‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©" }, { status: 400 });
    }

    const now = new Date();
    const thaiTime = formatToThaiTime(now);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    const created = await prisma.specialOrder.create({
      data: {
        firstName,
        lastName,
        phone,
        email: email ?? user.email,
        address,
        productType,
        model,
        quantity: qty,
        sizeLabel,
        chest: chestNum,
        length: lengthNum,
        notes: notes ?? null,
        status: status || "pending",
        userId: user.id,
        createdAtThai: thaiTime,
      },
      include: { user: true },
    });

    // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    try {
      await sendEmail(
        created.email,
        "T-Double: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏≥‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÑ‡∏ã‡∏™‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©",
        `
          <h2>‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
          <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì <b>${created.firstName} ${created.lastName}</b></p>
          <p>‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß</p>
          <ul>
            <li><b>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</b> ${created.productType} (${created.model})</li>
            <li><b>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:</b> ${created.quantity} ‡∏ï‡∏±‡∏ß</li>
            <li><b>‡πÑ‡∏ã‡∏™‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©:</b> ${created.sizeLabel} (‡∏≠‡∏Å ${created.chest} ‡∏ô‡∏¥‡πâ‡∏ß, ‡∏¢‡∏≤‡∏ß ${created.length} ‡∏ô‡∏¥‡πâ‡∏ß)</li>
          </ul>
          <p><b>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</b> ${created.createdAtThai}</p>
          <hr/>
          <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ üôè</p>
        `
      );
    } catch (mailErr) {
      console.error("‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", mailErr);
    }

    return NextResponse.json({ message: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ + ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏°‡∏•", order: created }, { status: 201 });
  } catch (err: any) {
    console.error("‚ùå POST /special-orders error:", err);
    return NextResponse.json({ error: err.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" }, { status: 500 });
  }
}

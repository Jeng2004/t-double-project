// /api/products/route.ts

export const runtime = 'nodejs';
export const config = { api: { bodyParser: false } };

import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import formidable from 'formidable';
import { Readable } from 'stream';
import fs from 'fs';
import path from 'path';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'super-secret-key';

type Stock = { S: number; M: number; L: number; XL: number };
type Price = { S: number; M: number; L: number; XL: number };

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT Token
function verifyToken(req: NextRequest) {
  const token = req.cookies.get('authToken')?.value;
  if (!token) throw new Error('No token');
  return jwt.verify(token, JWT_SECRET);
}

// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á NextRequest ‡πÄ‡∏õ‡πá‡∏ô Node.js Request
function nextRequestToNodeRequest(req: NextRequest): any {
  const readable = Readable.fromWeb(req.body as any);
  return Object.assign(readable, {
    headers: Object.fromEntries(req.headers),
    method: req.method
  });
}

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
function ensureUploadDir() {
  const uploadDir = path.join(process.cwd(), 'public/uploads');
  if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
  }
}

// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á multipart/form-data
async function parseFormData(req: NextRequest) {
  ensureUploadDir();
  const nodeReq = nextRequestToNodeRequest(req);
  const form = formidable({
    multiples: true,
    uploadDir: './public/uploads',
    keepExtensions: true
  });
  return new Promise<{ fields: formidable.Fields; files: formidable.Files }>((resolve, reject) => {
    form.parse(nodeReq, (err, fields, files) => {
      if (err) reject(err);
      else resolve({ fields, files });
    });
  });
}

// üîπ ADD: helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö normalize path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
function normalizeImagePath(p: string): string {
  try {
    // ‡∏ï‡∏±‡∏î query/fragment ‡∏≠‡∏≠‡∏Å ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏°
    const withoutQuery = p.split('?')[0].split('#')[0];
    // ‡∏ï‡∏±‡∏î‡πÇ‡∏î‡πÄ‡∏°‡∏ô/‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏≠‡∏≠‡∏Å ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô absolute URL
    const onlyPath = withoutQuery.replace(/^https?:\/\/[^/]+/i, '');
    // ‡πÉ‡∏ä‡πâ basename ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô lower-case
    const base = path.basename(onlyPath);
    return base.toLowerCase();
  } catch {
    return path.basename(p || '').toLowerCase();
  }
}

// ‚ú® POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
export async function POST(req: NextRequest) {
  try {
    verifyToken(req); // üîê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JWT

    const { fields, files } = await parseFormData(req);

    const name = String(fields.name || '');
    const category = String(fields.category || 'Uncategorized'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà

    if (!name) {
      return NextResponse.json({ error: 'Missing product name' }, { status: 400 });
    }

    const description = Array.isArray(fields.description)
      ? fields.description[0]
      : String(fields.description || '');

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Stock ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const stock: Stock = {
      S: parseInt(Array.isArray(fields.stock_S) ? fields.stock_S[0] : String(fields.stock_S || '0')),
      M: parseInt(Array.isArray(fields.stock_M) ? fields.stock_M[0] : String(fields.stock_M || '0')),
      L: parseInt(Array.isArray(fields.stock_L) ? fields.stock_L[0] : String(fields.stock_L || '0')),
      XL: parseInt(Array.isArray(fields.stock_XL) ? fields.stock_XL[0] : String(fields.stock_XL || '0'))
    };

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Price ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const price: Price = {
      S: parseFloat(Array.isArray(fields.price_S) ? fields.price_S[0] : String(fields.price_S || '0')),
      M: parseFloat(Array.isArray(fields.price_M) ? fields.price_M[0] : String(fields.price_M || '0')),
      L: parseFloat(Array.isArray(fields.price_L) ? fields.price_L[0] : String(fields.price_L || '0')),
      XL: parseFloat(Array.isArray(fields.price_XL) ? fields.price_XL[0] : String(fields.price_XL || '0'))
    };

    // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const imageFiles = Array.isArray((files as any).image)
      ? (files as any).image
      : (files as any).image
        ? [(files as any).image]
        : [];

    const imageUrls: string[] = imageFiles.map((file: any) =>
      `/uploads/${path.basename(file.filepath)}`
    );

    // üîπ ADD: ‡πÄ‡∏ä‡πá‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const uniqueInRequest = Array.from(new Set(imageUrls));
    if (uniqueInRequest.length !== imageUrls.length) {
      return NextResponse.json(
        { error: '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô' },
        { status: 400 }
      );
    }

    // üîπ ADD: ‡∏ó‡∏≥‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö lowercase ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô unique key
    const nameLC = name.toLowerCase();

    // üîπ ADD: ‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ nameLC (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå nameLC @unique ‡πÉ‡∏ô schema ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á)
    const existingByName = await prisma.product.findUnique({
      where: { nameLC },            // ‡πÉ‡∏ä‡πâ index unique ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏ö‡∏ô MongoDB
      select: { id: true, name: true }
    }).catch(async () => {
      // fallback (‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° schema ‡πÅ‡∏ï‡πà db ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà push): ‡πÉ‡∏ä‡πâ findFirst insensitive ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      return prisma.product.findFirst({
        where: { name: { equals: name, mode: 'insensitive' } },
        select: { id: true, name: true }
      });
    });

    if (existingByName) {
      return NextResponse.json(
        { error: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô' },
        { status: 409 }
      );
    }

    // üîπ ADD: ‡πÄ‡∏ä‡πá‡∏Å‡∏£‡∏π‡∏õ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ)
    if (imageUrls.length > 0) {
      // 1) ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà "‡∏°‡∏µ‡∏†‡∏≤‡∏û‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏ã‡πâ‡∏≥‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô" ‡∏î‡πâ‡∏ß‡∏¢ hasSome (‡πÄ‡∏£‡πá‡∏ß)
      const candidates = await prisma.product.findMany({
        where: { imageUrls: { hasSome: imageUrls } },
        select: { id: true, name: true, imageUrls: true }
      });

      if (candidates.length > 0) {
        // 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡πÅ‡∏ö‡∏ö normalize ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Å‡∏ß‡πà‡∏≤)
        const normalizedRequestImages = new Set(imageUrls.map(normalizeImagePath));

        // ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ overlap ‡∏à‡∏£‡∏¥‡∏á ‡πÜ
        const conflicts = candidates
          .map(p => {
            const overlap = p.imageUrls
              .map(normalizeImagePath)
              .filter(img => normalizedRequestImages.has(img));
            return { id: p.id, name: p.name, overlap };
          })
          .filter(x => x.overlap.length > 0);

        if (conflicts.length > 0) {
          return NextResponse.json(
            {
              error: '‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ',
              conflicts: conflicts.map(c => ({
                id: c.id,
                name: c.name,
                duplicateImages: c.overlap
              }))
            },
            { status: 409 }
          );
        }
      }
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (üîπ ADD: nameLC)
    const product = await prisma.product.create({
      data: {
        name,
        nameLC,                 // ‚¨ÖÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö lowercase
        description,
        category, // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å category ‡∏•‡∏á DB
        stock,
        price,
        imageUrls
      }
    });

    return NextResponse.json({ message: 'Shirt added', product }, { status: 201 });
  } catch (err: any) {
    console.error('‚ùå POST error:', err);
    return NextResponse.json({ error: err.message || 'Failed to add product' }, { status: 500 });
  }
}

// üì¶ GET: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function GET() {
  try {
    const products = await prisma.product.findMany(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å DB
    return NextResponse.json(products, { status: 200 });
  } catch (err: any) {
    console.error('‚ùå GET error:', err);
    return NextResponse.json({ error: err.message || 'Failed to fetch products' }, { status: 500 });
  }
}

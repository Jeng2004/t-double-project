// src/app/(website)/Order-details-admin/[id]/page.tsx
'use client';

import { useEffect, useMemo, useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import NavbarAdmin from '../../components/NavbarAdmin';
import styles from './Order-details-admin.module.css';

type SizeKey = 'S' | 'M' | 'L' | 'XL';

type AllowedStatus =
  | '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
  | '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'
  | '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
  | '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
  | '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß'
  | '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';

type OrderItem = {
  id: string;
  productId: string;
  quantity: number;
  size: SizeKey;
  unitPrice: number | null;
  totalPrice: number | null;
  product?: {
    id: string;
    name: string;
    imageUrls: string[];
    code?: string | null;
  } | null;
};

type OrderRow = {
  id: string;
  trackingId: string | null;
  status: AllowedStatus;
  createdAt: string;
  createdAtThai?: string | null;
  totalAmount?: number | null;
  orderItems: OrderItem[];
  user?: {
    id?: string;
    email?: string | null;
    name?: string | null;
    phone?: string | null;
    address?: string | null;
  } | null;
};

const firstImage = (arr?: string[]) =>
  (arr && arr.length > 0 ? arr[0] : '/placeholder.png');

const nf = (n: number) => {
  try { return new Intl.NumberFormat('th-TH').format(n); }
  catch { return String(n); }
};

const normalizeStatus = (s: unknown): AllowedStatus => {
  const allowed: AllowedStatus[] = [
    '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß',
    '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
  ];
  const str = String(s ?? '');
  return (allowed as string[]).includes(str) ? (str as AllowedStatus) : '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£';
};

const statusBadgeClass = (status: AllowedStatus) => {
  switch (status) {
    case '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': return `${styles.badge} ${styles.badgePending}`;
    case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': return `${styles.badge} ${styles.badgePreparing}`;
    case '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': return `${styles.badge} ${styles.badgeShipping}`;
    case '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß': return `${styles.badge} ${styles.badgeSuccess}`;
    case '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤': return `${styles.badge} ${styles.badgeReturn}`;
    case '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å':
    default: return `${styles.badge} ${styles.badgeCancel}`;
  }
};

/** ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß" ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏à‡∏£‡∏¥‡∏á */
const PAID_STATUSES: AllowedStatus[] = [
  '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', // ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à
  '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
  '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
  '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡πÄ‡∏•‡πâ‡∏ß',
  '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
];

export default function OrderDetailsAdminPage() {
  // üîß ‡πÄ‡∏•‡∏¥‡∏Å destructure ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô union | null
  const params = useParams() as { id?: string } | null;
  const id = params?.id ?? '';

  const router = useRouter();

  const [order, setOrder] = useState<OrderRow | null>(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string | null>(null);
  const [act, setAct] = useState<'confirm' | 'cancel' | null>(null);

  // === ‡∏™‡∏•‡∏¥‡∏õ (blob URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ) ===
  const [slipBlobUrl, setSlipBlobUrl] = useState<string | null>(null);
  const [slipLoading, setSlipLoading] = useState(false);
  const [slipErr, setSlipErr] = useState<string | null>(null);

  useEffect(() => {
    let ignore = false;
    async function load() {
      try {
        if (!id) return;
        setLoading(true);
        setErr(null);
        const res = await fetch(`/api/orders?id=${encodeURIComponent(id)}`, { cache: 'no-store' });
        const data = await res.json();
        if (!res.ok) throw new Error(data?.error || '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

        const items: OrderItem[] = Array.isArray(data?.orderItems)
          ? data.orderItems.map((it: unknown): OrderItem => {
              const r = (it ?? {}) as Record<string, unknown>;
              const p = (r.product as Record<string, unknown> | null | undefined) ?? null;
              return {
                id: String(r.id ?? ''),
                productId: String(r.productId ?? ''),
                quantity: Number(r.quantity ?? 0),
                size: String(r.size ?? 'M') as SizeKey,
                unitPrice: typeof r.unitPrice === 'number' ? r.unitPrice : null,
                totalPrice: typeof r.totalPrice === 'number' ? r.totalPrice : null,
                product: p ? {
                  id: String(p.id ?? ''),
                  name: String(p.name ?? ''),
                  imageUrls: Array.isArray(p.imageUrls) ? (p.imageUrls as string[]) : [],
                  code: (p.code as string | null | undefined) ?? null,
                } : null,
              };
            })
          : [];

        const mapped: OrderRow = {
          id: String(data.id ?? ''),
          trackingId: data.trackingId ?? null,
          status: normalizeStatus(data.status),
          createdAt: String(data.createdAt ?? ''),
          createdAtThai: data.createdAtThai ?? null,
          totalAmount: typeof data.totalAmount === 'number' ? data.totalAmount : null,
          orderItems: items,
          user: data.user ? {
            id: data.user.id,
            email: data.user.email ?? null,
            name: data.user.name ?? null,
            phone: data.user.phone ?? null,
            address: data.user.address ?? null,
          } : null,
        };

        if (!ignore) setOrder(mapped);
      } catch (e) {
        if (!ignore) setErr(e instanceof Error ? e.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      } finally {
        if (!ignore) setLoading(false);
      }
    }
    load();
    return () => { ignore = true; };
  }, [id]);

  // ‡πÇ‡∏´‡∏•‡∏î/‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‚Äù
  useEffect(() => {
    if (!order) return;

    setSlipErr(null);
    setSlipLoading(false);

    if (!PAID_STATUSES.includes(order.status)) {
      if (slipBlobUrl) URL.revokeObjectURL(slipBlobUrl);
      setSlipBlobUrl(null);
      return;
    }

    let canceled = false;
    let currentBlob: string | null = null;

    const loadSlip = async () => {
      try {
        setSlipLoading(true);
        setSlipErr(null);

        // GET ‡∏Å‡πà‡∏≠‡∏ô
        let r = await fetch(`/api/slip?orderId=${encodeURIComponent(order.id)}`, { cache: 'no-store' });
        if (r.status === 404) {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí POST ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß GET ‡πÉ‡∏´‡∏°‡πà
          const p = await fetch('/api/slip', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId: order.id }),
          });
          if (!p.ok) throw new Error(await p.text());
          r = await fetch(`/api/slip?orderId=${encodeURIComponent(order.id)}`, { cache: 'no-store' });
        }
        if (!r.ok) throw new Error(await r.text());

        const blob = await r.blob();
        const url = URL.createObjectURL(blob);
        currentBlob = url;

        if (!canceled) setSlipBlobUrl(url);
      } catch (e) {
        if (!canceled) setSlipErr('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ');
      } finally {
        if (!canceled) setSlipLoading(false);
      }
    };

    loadSlip();
    return () => {
      canceled = true;
      if (currentBlob) URL.revokeObjectURL(currentBlob);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [order?.id, order?.status]);

  const orderTotal = useMemo(() => {
    if (!order) return 0;
    if (typeof order.totalAmount === 'number') return order.totalAmount;
    return order.orderItems.reduce((s, it) => {
      const line = it.totalPrice ?? (typeof it.unitPrice === 'number' ? it.unitPrice * it.quantity : 0);
      return s + (line || 0);
    }, 0);
  }, [order]);

  async function changeStatus(status: AllowedStatus, mode: 'confirm' | 'cancel') {
    if (!order) return;
    try {
      setAct(mode);
      const res = await fetch(`/api/orders/${encodeURIComponent(order.id)}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      setOrder(prev => prev ? { ...prev, status: normalizeStatus(data.order?.status ?? status) } : prev);
    } catch (e: unknown) {
      setErr(e instanceof Error ? e.message : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setAct(null);
    }
  }

  if (loading) {
    return (
      <>
        <NavbarAdmin />
        <div className={styles.page}><div className={styles.container}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‚Ä¶</div></div>
      </>
    );
  }
  if (err || !order) {
    return (
      <>
        <NavbarAdmin />
        <div className={styles.page}><div className={styles.container}><div className={styles.error}>‚ùå {err || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}</div></div></div>
      </>
    );
  }

  const paymentMethod = '‡∏ö‡∏±‡∏ï‡∏£ / QR (‡∏à‡∏≥‡∏•‡∏≠‡∏á)';
  const paymentStatus = PAID_STATUSES.includes(order.status) ? '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞ / ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á src ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏±‡∏á PDF (‡∏ã‡πà‡∏≠‡∏ô UI + fit width)
  const slipEmbedSrc =
    slipBlobUrl &&
    `${slipBlobUrl}#toolbar=0&navpanes=0&scrollbar=0&statusbar=0&messages=0&view=FitH&zoom=page-width`;

  return (
    <>
      <NavbarAdmin />
      <div className={styles.page}>
        <div className={styles.container}>
          <h1 className={styles.title}>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h1>

          <div className={styles.infoGrid}>
            <div className={styles.infoLabel}>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:</div>
            <div className={styles.infoValue}>ORD-{order.id}</div>

            <div className={styles.infoLabel}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</div>
            <div className={styles.infoValue}>
              <span className={statusBadgeClass(order.status)}>{order.status}</span>
            </div>
          </div>

          <section className={styles.section}>
            <h3 className={styles.sectionTitle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h3>
            <div className={styles.recipientCard}>
              <div className={styles.recRow}>
                <div className={styles.recCol}>
                  <div className={styles.recLabel}>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö</div>
                  <div className={styles.recValue}>{order.user?.name ?? '-'}</div>
                </div>
                <div className={styles.recCol}>
                  <div className={styles.recLabel}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</div>
                  <div className={styles.recValue}>{order.user?.phone ?? '-'}</div>
                </div>
              </div>
              <div className={styles.recRow}>
                <div className={styles.recCol}>
                  <div className={styles.recLabel}>‡∏≠‡∏µ‡πÄ‡∏°‡∏•</div>
                  <div className={styles.recValue}>{order.user?.email ?? '-'}</div>
                </div>
                <div className={styles.recCol}>
                  <div className={styles.recLabel}>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</div>
                  <div className={styles.recValue}>{order.user?.address ?? '-'}</div>
                </div>
              </div>
            </div>
          </section>

          <section className={styles.section}>
            <h3 className={styles.sectionTitle}>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
            {order.orderItems.map((it) => (
              <div key={it.id} className={styles.itemRow}>
                <div className={styles.thumbBox}>
                  <Image
                    src={firstImage(it.product?.imageUrls)}
                    alt={it.product?.name || 'product'}
                    width={120}
                    height={120}
                    className={styles.thumb}
                  />
                </div>

                <div className={styles.itemMeta}>
                  <div className={styles.itemName}>{it.product?.name ?? '-'}</div>
                  <div className={styles.itemSub}>
                    Size: {it.size} ‚Ä¢ x{it.quantity} {it.product?.code ? `‚Ä¢ SKU: ${it.product.code}` : ''}
                  </div>
                </div>

                <div className={styles.itemPrice}>
                  ‡∏ø{nf((it.totalPrice ?? (typeof it.unitPrice === 'number' ? it.unitPrice * it.quantity : 0)) || 0)}
                </div>
              </div>
            ))}
          </section>

          <section className={styles.section}>
            <h3 className={styles.sectionTitle}>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h3>
            <div className={styles.infoGrid}>
              <div className={styles.infoLabel}>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</div>
              <div className={styles.infoValue}>{paymentMethod}</div>

              <div className={styles.infoLabel}>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</div>
              <div className={styles.infoValue}>{paymentStatus}</div>
            </div>

            <div className={styles.sectionTitle} style={{ marginTop: 12 }}>Payment Verification</div>

            {PAID_STATUSES.includes(order.status) ? (
              slipEmbedSrc ? (
                <div
                  className={styles.slipWrap}
                  role="button"
                  title="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà (PDF)"
                  tabIndex={0}
                  onClick={() => { if (slipBlobUrl) window.open(slipBlobUrl, '_blank', 'noopener,noreferrer'); }}
                  onKeyDown={(e) => {
                    if ((e.key === 'Enter' || e.key === ' ') && slipBlobUrl) {
                      window.open(slipBlobUrl, '_blank', 'noopener,noreferrer');
                    }
                  }}
                >
                  <iframe
                    className={styles.slipFrame}
                    src={slipEmbedSrc}
                    title="payment-slip"
                    scrolling="no"
                  />
                  <div className={styles.slipOverlay} aria-hidden />
                </div>
              ) : slipLoading ? (
                <div>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‚Ä¶</div>
              ) : (
                <div className={styles.error}>{slipErr ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏•‡∏¥‡∏õ'}</div>
              )
            ) : (
              <div className={styles.fakeSlip}>
                <div className={styles.fakeSlipHeader}>PAYMENT SLIP (DEMO)</div>
                <div className={styles.fakeSlipBody}>
                  <div>Amount: ‡∏ø{nf(orderTotal)}</div>
                </div>
              </div>
            )}
          </section>

          <div className={styles.actions}>
            {order.status === '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' && (
              <>
                <button
                  className={styles.btnPrimary}
                  disabled={act === 'confirm'}
                  onClick={() => changeStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 'confirm')}
                >
                  {act === 'confirm' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏°‚Ä¶' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}
                </button>
                <button
                  className={styles.btnDanger}
                  disabled={act === 'cancel'}
                  onClick={() => changeStatus('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'cancel')}
                >
                  {act === 'cancel' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‚Ä¶' : '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'}
                </button>
              </>
            )}

            <button className={styles.btnGhost} onClick={() => router.back()}>‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
          </div>
        </div>
      </div>
    </>
  );
}

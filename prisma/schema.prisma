generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String      @unique
  password      String
  role          String      @default("user")
  createdAt     DateTime    @default(now())
  username      String?     @unique
  status        String?
  dept          String?
  active        Boolean     @default(false)
  otp           String?
  otpExpiry     DateTime?
  cartItems     CartItem[]  @relation("UserCartItems")
  phone         String?
  address       String?
  profileImage  String?

  orders        Order[]
  specialOrders SpecialOrder[]
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  category    String?
  price       Json
  stock       Json
  imageUrls   String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cartItems   CartItem[]   @relation("ProductCartItems")
  orderItems  OrderItem[]  @relation("ProductOrderItems")
}

model CartItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int      @default(1)
  size       String
  unitPrice  Int
  totalPrice Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation("UserCartItems", fields: [userId], references: [id])
  product    Product  @relation("ProductCartItems", fields: [productId], references: [id])
}

model OrderItem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String       @db.ObjectId
  order       Order        @relation(fields: [orderId], references: [id]) 
  productId   String       @db.ObjectId
  product     Product      @relation("ProductOrderItems", fields: [productId], references: [id])
  quantity    Int
  price       Float
  size        String
  unitPrice   Float
  totalPrice  Float

  status         String      @default("‡∏õ‡∏Å‡∏ï‡∏¥")
  returnQuantity Int?        @default(0)

  returnItems    ReturnItem[]
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  user            User             @relation(fields: [userId], references: [id])
  totalAmount     Float
  status          String           @default("pending")
  trackingId      String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  cancelReason    String?
  createdAtThai   String?
  isPaid          Boolean          @default(false)
  paymentIntentId String?
  orderItems      OrderItem[]
  returnRequests  ReturnRequest[]
}

model ReturnRequest {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String       @db.ObjectId
  order     Order        @relation(fields: [orderId], references: [id])

  status    String       @default("pending")
  reason    String?
  adminNote String?
  images    String[]
  category  String?       
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  items     ReturnItem[]
}

model ReturnItem {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  returnRequestId String        @db.ObjectId
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id])

  orderItemId     String        @db.ObjectId
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id])

  quantity        Int
  @@unique([orderItemId])
}

model SpecialOrder {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  phone          String
  email          String
  address        String
  category       String
  productName    String
  color          String?
  quantity       Int
  sizeDetail     String
  status         String   @default("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
  cancelReason   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime? @updatedAt @default(now())
  createdAtThai  String?
  price          Int?
  isApproved     Boolean  @default(false)
  paymentUrl     String?
  trackingId     String?
  paymentIntentId String?
  refundId        String?

  userId String?  @db.ObjectId
  user   User?    @relation(fields: [userId], references: [id])

  // üëá ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
  returnRequests ReturnSpecialRequest[]
}

model ReturnSpecialRequest {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  specialOrderId String        @db.ObjectId
  specialOrder   SpecialOrder  @relation(fields: [specialOrderId], references: [id])

  status    String       @default("‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£") // ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£, ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥, ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
  reason    String?
  adminNote String?
  images    String[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

